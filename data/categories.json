{"uid":"4b4757e66a1912dae1a509f688f20b0f","name":"categories","children":[{"name":"Product defects","children":[{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"1efab43beab5ec99","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727800187612,"stop":1727800188135,"duration":523},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-01T16:29:44)","400","Book with empty values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"363634ed7145566e","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727800355743,"stop":1727800356274,"duration":531},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-01T16:32:32)","400","Book with empty values shouldn't be created"],"tags":[]}],"uid":"3370a7f4dd3188fd5fc8c86282e49c0d"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Id shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"2aa2bb055169a2c6","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727800188822,"stop":1727800189321,"duration":499},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Of Mice and Men, description=Sed non dolorem corporis., pageCount=416, excerpt=Minus consequatur dignissimos libero., publishDate=2024-10-01T16:29:44)","400","Book with negative Id shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"40cde23e9d19ae33","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727800356942,"stop":1727800357448,"duration":506},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Brandy of the Damned, description=Aut cupiditate perferendis., pageCount=208, excerpt=Ea aspernatur laudantium possimus., publishDate=2024-10-01T16:32:32)","400","Book with negative Id shouldn't be created"],"tags":[]}],"uid":"8ed27f214b949010e0aa50c6e49affd7"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Page Count shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"bbaf706fcbbce87c","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727800189323,"stop":1727800189836,"duration":513},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=552, title=The Proper Study, description=Iste sed consequatur quas deleniti et., pageCount=-1, excerpt=Dolor totam exercitationem expedita et quas sed., publishDate=2024-10-01T16:29:44)","400","Book with negative Page Count shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"17c14a3682f587be","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727800357450,"stop":1727800357945,"duration":495},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=604, title=Terrible Swift Sword, description=Provident sed recusandae omnis doloremque at aut., pageCount=-1, excerpt=Esse soluta sapiente sed ipsa laudantium odio., publishDate=2024-10-01T16:32:32)","400","Book with negative Page Count shouldn't be created"],"tags":[]}],"uid":"80e7135b737a04fdf70f4064292977a9"},{"name":"Book with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"76d6defb1655a316","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727800220072,"stop":1727800222754,"duration":2682},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-01T16:30:17)","400","Book with empty values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"3cfadf392666a43f","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727800387382,"stop":1727800390009,"duration":2627},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-01T16:33:04)","400","Book with empty values shouldn't be updated"],"tags":[]}],"uid":"284eaf1f54ab03c166819829e92cd423"},{"name":"Book with negative Id shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"fb2af651e8b27bff","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727800225526,"stop":1727800228334,"duration":2808},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Death Be Not Proud, description=Ullam voluptatem ducimus., pageCount=414, excerpt=Nemo sit molestiae eum magnam recusandae omnis., publishDate=2024-10-01T16:30:17)","400","Book with negative Id shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"d1328493a6529079","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727800392809,"stop":1727800395600,"duration":2791},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=As I Lay Dying, description=Similique maxime hic., pageCount=449, excerpt=Qui et numquam inventore., publishDate=2024-10-01T16:33:04)","400","Book with negative Id shouldn't be updated"],"tags":[]}],"uid":"1b5867a212a17820a5873ac942dcd231"},{"name":"Book with negative Page Count shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"3c5363eebd06a0b4","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727800228336,"stop":1727800231006,"duration":2670},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=567, title=The Widening Gyre, description=Dolor modi veniam., pageCount=-1, excerpt=Delectus delectus vel officiis sapiente non natus., publishDate=2024-10-01T16:30:17)","400","Book with negative Page Count shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"10c37cd433e6051d","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727800395602,"stop":1727800398441,"duration":2839},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=696, title=Blithe Spirit, description=Illo dolorum iste., pageCount=-1, excerpt=Quo quia exercitationem., publishDate=2024-10-01T16:33:04)","400","Book with negative Page Count shouldn't be updated"],"tags":[]}],"uid":"a06ce7956868c32978db476adede7eb6"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"efaa19fbbdb297d8","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727800234834,"stop":1727800235319,"duration":485},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=1, firstName=Joycelyn, lastName=Gerlach)","400","Author with empty ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"d1b156a4edeafeb8","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727800402428,"stop":1727800402914,"duration":486},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=3, firstName=Rory, lastName=Ebert)","400","Author with empty ID shouldn't be created"],"tags":[]}],"uid":"65fa78b39144a4ada83f643d5bc79964"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"23bf415de5836c49","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727800235321,"stop":1727800235828,"duration":507},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=601, idBook=0, firstName=Desmond, lastName=Beahan)","400","Author with empty Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"b114a21ade055177","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727800402916,"stop":1727800403399,"duration":483},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=529, idBook=0, firstName=Romelia, lastName=Morissette)","400","Author with empty Book ID shouldn't be created"],"tags":[]}],"uid":"e9e27f9ce896036cfab8ae1ed0473865"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"d9b8ae342e7c4026","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727800235830,"stop":1727800236326,"duration":496},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=3, firstName=Kizzy, lastName=Langosh)","400","Author with negative ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"2f4d139d318b2268","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727800403400,"stop":1727800403918,"duration":518},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=4, firstName=Damaris, lastName=Hamill)","400","Author with negative ID shouldn't be created"],"tags":[]}],"uid":"5419c6a1b19b22305f90d28adedd7a3b"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"23127c867c0edd76","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727800236327,"stop":1727800236820,"duration":493},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=631, idBook=-1, firstName=Dewayne, lastName=Pacocha)","400","Author with negative Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"d61d10426bab9912","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727800403920,"stop":1727800404413,"duration":493},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=649, idBook=-1, firstName=Young, lastName=Glover)","400","Author with negative Book ID shouldn't be created"],"tags":[]}],"uid":"c3a1f4279175b6452cc4b08aff3c57d5"},{"name":"Author with empty ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"86a01a6e52b3446a","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727800284216,"stop":1727800291100,"duration":6884},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=3, firstName=Tonita, lastName=Herzog)","400","Author with empty ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"ec854e86cf9ee4c7","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727800449962,"stop":1727800456460,"duration":6498},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=4, firstName=Sarina, lastName=Watsica)","400","Author with empty ID shouldn't be updated"],"tags":[]}],"uid":"6e4a2787e8c4488bf832eff110764ff1"},{"name":"Author with empty Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"b58ac6fd8b5fb245","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727800291101,"stop":1727800298072,"duration":6971},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=508, idBook=0, firstName=Tommie, lastName=Hoeger)","400","Author with empty Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"85a7f816339c4680","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727800456462,"stop":1727800463199,"duration":6737},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=683, idBook=0, firstName=Dirk, lastName=Thiel)","400","Author with empty Book ID shouldn't be updated"],"tags":[]}],"uid":"6c8c12fd6164dc235d43eca74f33905a"},{"name":"Author with negative ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"4d0695588d64bcde","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727800298074,"stop":1727800304738,"duration":6664},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=9, firstName=Roscoe, lastName=Raynor)","400","Author with negative ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"9689cb290a9d1c17","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727800463200,"stop":1727800469814,"duration":6614},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=4, firstName=Lucio, lastName=O'Reilly)","400","Author with negative ID shouldn't be updated"],"tags":[]}],"uid":"c8ce8265024a3ebe4420d86197f92a98"},{"name":"Author with negative Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"4731a4d4940a3b62","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727800304740,"stop":1727800311500,"duration":6760},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=615, idBook=-1, firstName=Leandro, lastName=Will)","400","Author with negative Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"ad0c876073e3a51c","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727800469815,"stop":1727800476357,"duration":6542},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=574, idBook=-1, firstName=Mike, lastName=Nolan)","400","Author with negative Book ID shouldn't be updated"],"tags":[]}],"uid":"f272fa165a79ea7e933802110e90b2b9"},{"name":"Book should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a book after it has already been deleted","uid":"df8ac936e7171f28","parentUid":"2a9043e57177aea22f04fabe758903cb","status":"failed","time":{"start":1727800371621,"stop":1727800374967,"duration":3346},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2a9043e57177aea22f04fabe758903cb"},{"name":"Cannot delete book with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a book with negative id","uid":"d12dc28080e2840a","parentUid":"eada11eecbab43690d1986a248b378f0","status":"failed","time":{"start":1727800374969,"stop":1727800375439,"duration":470},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"eada11eecbab43690d1986a248b378f0"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:30)\n-- failure 2 --\n[Book should be deleted] \nexpected: \"Not Found\"\n but was: \"Book 35\"\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:33)","children":[{"name":"Verify that we can delete an existing book","uid":"a85c95d97269d478","parentUid":"dfa87e946ff73dac464d6b92528f67dc","status":"failed","time":{"start":1727800376935,"stop":1727800380959,"duration":4024},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"dfa87e946ff73dac464d6b92528f67dc"},{"name":"Cannot delete book with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent book","uid":"2fd3f628f8cba85e","parentUid":"67a458809384d4b7fa45ab751d62740e","status":"failed","time":{"start":1727800380962,"stop":1727800384013,"duration":3051},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"67a458809384d4b7fa45ab751d62740e"},{"name":"Cannot update book by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a book by negative ID","uid":"d5cc86633abf8af0","parentUid":"55634d9611c3a987f63e6eb9732264dc","status":"failed","time":{"start":1727800384015,"stop":1727800384503,"duration":488},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"55634d9611c3a987f63e6eb9732264dc"},{"name":"Book doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent book","uid":"abee33292a9bf829","parentUid":"b4a6224ca59d54af07963b4492ef831c","status":"failed","time":{"start":1727800398443,"stop":1727800401295,"duration":2852},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b4a6224ca59d54af07963b4492ef831c"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"f74dda24dd69862e","parentUid":"d74c92717ec3c0f9ae9c4d3da0e46204","status":"failed","time":{"start":1727800401913,"stop":1727800402426,"duration":513},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be created"],"tags":[]}],"uid":"d74c92717ec3c0f9ae9c4d3da0e46204"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyGetAuthorAPITest.lambda$getDeletedAuthor$10(VerifyGetAuthorAPITest.java:187)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyGetAuthorAPITest.lambda$getDeletedAuthor$10(VerifyGetAuthorAPITest.java:190)","children":[{"name":"Verify that we cannot get deleted author","uid":"5e3f9a2e8b260ce7","parentUid":"002f473e7e90cfcfda738615c8f47f3f","status":"failed","time":{"start":1727800421983,"stop":1727800423419,"duration":1436},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"002f473e7e90cfcfda738615c8f47f3f"},{"name":"Cannot update author by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a author by negative ID","uid":"c4f9688e7c4b8f94","parentUid":"d224f289a8893664c1d486844ae7c764","status":"failed","time":{"start":1727800436017,"stop":1727800436498,"duration":481},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"d224f289a8893664c1d486844ae7c764"},{"name":"Author with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"d991b1a23b029063","parentUid":"a80397cd680a3d8c3846f121931ad39e","status":"failed","time":{"start":1727800443257,"stop":1727800449960,"duration":6703},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be updated"],"tags":[]}],"uid":"a80397cd680a3d8c3846f121931ad39e"},{"name":"Author doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent author","uid":"d4455f26bba4a4e5","parentUid":"a032517df060fd60f900c990f7591823","status":"failed","time":{"start":1727800476359,"stop":1727800482829,"duration":6470},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a032517df060fd60f900c990f7591823"},{"name":"Author should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a author after it has already been deleted","uid":"1f32a8ac07b0876a","parentUid":"207ffbd3a7044bd433a867543991917b","status":"failed","time":{"start":1727800482831,"stop":1727800489898,"duration":7067},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"207ffbd3a7044bd433a867543991917b"},{"name":"Cannot delete author with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a author with negative id","uid":"1b891cb0fe866932","parentUid":"4980178a54c9663521aca707d35885cc","status":"failed","time":{"start":1727800489900,"stop":1727800490375,"duration":475},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"4980178a54c9663521aca707d35885cc"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:54)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:57)","children":[{"name":"Verify that we can delete an created author","uid":"47743190d50eef1a","parentUid":"52074c71f423fbd9438cd62e6af3093f","status":"failed","time":{"start":1727800490376,"stop":1727800491819,"duration":1443},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":true,"parameters":[],"tags":[]}],"uid":"52074c71f423fbd9438cd62e6af3093f"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:30)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:33)","children":[{"name":"Verify that we can delete an existing author","uid":"5e0077c65614c364","parentUid":"73d888308bcf147d02c56cfa9feda61b","status":"failed","time":{"start":1727800491821,"stop":1727800499476,"duration":7655},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"73d888308bcf147d02c56cfa9feda61b"},{"name":"Cannot delete author with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent author","uid":"3cdded4063760199","parentUid":"3e522ede7434154f8f6c4a4f1bf5fed4","status":"failed","time":{"start":1727800499478,"stop":1727800506207,"duration":6729},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3e522ede7434154f8f6c4a4f1bf5fed4"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}]}