{"uid":"4b4757e66a1912dae1a509f688f20b0f","name":"categories","children":[{"name":"Product defects","children":[{"name":"Book with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"5df420475763c5c4","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1728460680360,"stop":1728460682303,"duration":1943},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T07:57:58)","400","Book with empty values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"640327a743303969","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1728460834251,"stop":1728460836205,"duration":1954},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T08:00:32)","400","Book with empty values shouldn't be updated"],"tags":[]}],"uid":"284eaf1f54ab03c166819829e92cd423"},{"name":"Book with negative Id values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"669e18031382282e","parentUid":"c69cc2c2db4517ff0324acfbd83d1d08","status":"failed","time":{"start":1728460684304,"stop":1728460686250,"duration":1946},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Dying of the Light, description=Ipsam nobis nihil corrupti odit ut rerum., pageCount=104, excerpt=Eius molestias sapiente aut., publishDate=2024-10-09T07:57:58)","400","Book with negative Id values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"f7a8af53d55d4259","parentUid":"c69cc2c2db4517ff0324acfbd83d1d08","status":"failed","time":{"start":1728460838152,"stop":1728460840153,"duration":2001},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=All the King's Men, description=Fuga enim possimus., pageCount=432, excerpt=Voluptatem minima iste error et nihil quas est., publishDate=2024-10-09T08:00:32)","400","Book with negative Id values shouldn't be updated"],"tags":[]}],"uid":"c69cc2c2db4517ff0324acfbd83d1d08"},{"name":"Book with negative Page Count values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"f76046496b5af5e","parentUid":"f16577c974f36a3f6f0d851d0ff8c82e","status":"failed","time":{"start":1728460686252,"stop":1728460688151,"duration":1899},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=588, title=The House of Mirth, description=Consequatur quam explicabo ducimus accusamus., pageCount=-1, excerpt=Eius error alias omnis sunt placeat., publishDate=2024-10-09T07:57:58)","400","Book with negative Page Count values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"1d57dec18f0fed36","parentUid":"f16577c974f36a3f6f0d851d0ff8c82e","status":"failed","time":{"start":1728460840155,"stop":1728460842003,"duration":1848},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=682, title=Fear and Trembling, description=Suscipit atque quam id nemo dolor molestiae rerum., pageCount=-1, excerpt=Qui delectus quo dolor rerum occaecati ullam magni., publishDate=2024-10-09T08:00:32)","400","Book with negative Page Count values shouldn't be updated"],"tags":[]}],"uid":"f16577c974f36a3f6f0d851d0ff8c82e"},{"name":"\nThe following assertion failed:\n1) [Book with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)\n","children":[{"name":"Verify that we can create a new book with Data","uid":"9458b0ff033f38d3","parentUid":"438009fafbe2b26dbc1e3a878f50648e","status":"failed","time":{"start":1728460690744,"stop":1728460691222,"duration":478},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T07:58:10)","400","Book with empty values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"e6de93b160a4db9f","parentUid":"438009fafbe2b26dbc1e3a878f50648e","status":"failed","time":{"start":1728460844559,"stop":1728460845041,"duration":482},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T08:00:43)","400","Book with empty values shouldn't be created"],"tags":[]}],"uid":"438009fafbe2b26dbc1e3a878f50648e"},{"name":"\nThe following assertion failed:\n1) [Book with negative Id values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)\n","children":[{"name":"Verify that we can create a new book with Data","uid":"916ea5643740e3c1","parentUid":"09a4678d52cd3d107246cd6dd208a206","status":"failed","time":{"start":1728460691685,"stop":1728460692165,"duration":480},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Everything is Illuminated, description=Aut maxime amet., pageCount=135, excerpt=Natus voluptatem sed., publishDate=2024-10-09T07:58:10)","400","Book with negative Id values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"a73c1178d92fba23","parentUid":"09a4678d52cd3d107246cd6dd208a206","status":"failed","time":{"start":1728460845512,"stop":1728460845984,"duration":472},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=A Passage to India, description=Voluptatem reiciendis pariatur dolorum ipsa aut., pageCount=279, excerpt=Suscipit quos dolores., publishDate=2024-10-09T08:00:43)","400","Book with negative Id values shouldn't be created"],"tags":[]}],"uid":"09a4678d52cd3d107246cd6dd208a206"},{"name":"\nThe following assertion failed:\n1) [Book with negative Page Count values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)\n","children":[{"name":"Verify that we can create a new book with Data","uid":"422bf3f9317cb421","parentUid":"4eaa12affdf10cced05a479607369a66","status":"failed","time":{"start":1728460692166,"stop":1728460692658,"duration":492},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=554, title=In Dubious Battle, description=Rerum ut quae., pageCount=-1, excerpt=Voluptatum autem voluptatibus qui sapiente eos dolor exercitationem., publishDate=2024-10-09T07:58:10)","400","Book with negative Page Count values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"8215de4b3a5dc55","parentUid":"4eaa12affdf10cced05a479607369a66","status":"failed","time":{"start":1728460845986,"stop":1728460846476,"duration":490},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=508, title=A Catskill Eagle, description=Delectus unde deserunt aut sit., pageCount=-1, excerpt=A perferendis deleniti quaerat ipsam., publishDate=2024-10-09T08:00:43)","400","Book with negative Page Count values shouldn't be created"],"tags":[]}],"uid":"4eaa12affdf10cced05a479607369a66"},{"name":"Author with empty ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"1b8524ce921ab0cd","parentUid":"863fb4ff54934aa97733b7d6d5f4a010","status":"failed","time":{"start":1728460716277,"stop":1728460723127,"duration":6850},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=4, firstName=Fermina, lastName=Kertzmann)","400","Author with empty ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"cc24ea953a9c49d1","parentUid":"863fb4ff54934aa97733b7d6d5f4a010","status":"failed","time":{"start":1728460869564,"stop":1728460876475,"duration":6911},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=4, firstName=Major, lastName=Osinski)","400","Author with empty ID values shouldn't be updated"],"tags":[]}],"uid":"863fb4ff54934aa97733b7d6d5f4a010"},{"name":"Author with empty Book ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"1a424f7af82164be","parentUid":"bbcb886bb3a81eed23f33f68b57b081c","status":"failed","time":{"start":1728460723129,"stop":1728460730027,"duration":6898},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=519, idBook=0, firstName=Monty, lastName=Renner)","400","Author with empty Book ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"700b24b947d52b30","parentUid":"bbcb886bb3a81eed23f33f68b57b081c","status":"failed","time":{"start":1728460876477,"stop":1728460883405,"duration":6928},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=661, idBook=0, firstName=Richie, lastName=Becker)","400","Author with empty Book ID values shouldn't be updated"],"tags":[]}],"uid":"bbcb886bb3a81eed23f33f68b57b081c"},{"name":"Author with negative ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"46c85a7e99304ced","parentUid":"0b994a4dcaec1e666b910aa98dcbfa35","status":"failed","time":{"start":1728460730028,"stop":1728460736743,"duration":6715},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=6, firstName=Lorette, lastName=Koelpin)","400","Author with negative ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"e772bfb0c5109326","parentUid":"0b994a4dcaec1e666b910aa98dcbfa35","status":"failed","time":{"start":1728460883407,"stop":1728460890361,"duration":6954},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=7, firstName=Kendra, lastName=Deckow)","400","Author with negative ID values shouldn't be updated"],"tags":[]}],"uid":"0b994a4dcaec1e666b910aa98dcbfa35"},{"name":"Author with negative Book ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"ff1fba396ec10dab","parentUid":"88d43aa5cd072047e3065b7edabcc500","status":"failed","time":{"start":1728460736745,"stop":1728460743650,"duration":6905},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=677, idBook=-1, firstName=Richie, lastName=Lockman)","400","Author with negative Book ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"67a754684d834b4a","parentUid":"88d43aa5cd072047e3065b7edabcc500","status":"failed","time":{"start":1728460890363,"stop":1728460897398,"duration":7035},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=528, idBook=-1, firstName=Arnita, lastName=Rohan)","400","Author with negative Book ID values shouldn't be updated"],"tags":[]}],"uid":"88d43aa5cd072047e3065b7edabcc500"},{"name":"\nThe following assertion failed:\n1) [Author with empty ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"243141df99ed527","parentUid":"50ad6351d48b97aaa76ec456f901c5a8","status":"failed","time":{"start":1728460751456,"stop":1728460751949,"duration":493},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=9, firstName=Magdalen, lastName=Swift)","400","Author with empty ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"70ef65b2ffa790a4","parentUid":"50ad6351d48b97aaa76ec456f901c5a8","status":"failed","time":{"start":1728460905305,"stop":1728460905785,"duration":480},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=8, firstName=Leo, lastName=Denesik)","400","Author with empty ID values shouldn't be created"],"tags":[]}],"uid":"50ad6351d48b97aaa76ec456f901c5a8"},{"name":"\nThe following assertion failed:\n1) [Author with empty Book ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"3683529d2e066efe","parentUid":"ddca8a099c6e61ba07f2d42326cb6474","status":"failed","time":{"start":1728460751951,"stop":1728460752433,"duration":482},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=646, idBook=0, firstName=Rafael, lastName=Treutel)","400","Author with empty Book ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"2b8561eb69c9da1d","parentUid":"ddca8a099c6e61ba07f2d42326cb6474","status":"failed","time":{"start":1728460905786,"stop":1728460906269,"duration":483},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=597, idBook=0, firstName=Wilbur, lastName=Veum)","400","Author with empty Book ID values shouldn't be created"],"tags":[]}],"uid":"ddca8a099c6e61ba07f2d42326cb6474"},{"name":"\nThe following assertion failed:\n1) [Author with negative ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"8a614dd69b69e223","parentUid":"06b54228939c12b6ccbc33f556c9127a","status":"failed","time":{"start":1728460752434,"stop":1728460752914,"duration":480},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=7, firstName=Milford, lastName=Cole)","400","Author with negative ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"dd2a6ae29ea6f3ce","parentUid":"06b54228939c12b6ccbc33f556c9127a","status":"failed","time":{"start":1728460906270,"stop":1728460906748,"duration":478},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=6, firstName=Maryellen, lastName=Stracke)","400","Author with negative ID values shouldn't be created"],"tags":[]}],"uid":"06b54228939c12b6ccbc33f556c9127a"},{"name":"\nThe following assertion failed:\n1) [Author with negative Book ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"d4b46fd254bf9769","parentUid":"cbd4026964127f84c52f5ec16f874f7f","status":"failed","time":{"start":1728460752915,"stop":1728460753403,"duration":488},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=561, idBook=-1, firstName=Ernie, lastName=Mosciski)","400","Author with negative Book ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"142f5939bb640db5","parentUid":"cbd4026964127f84c52f5ec16f874f7f","status":"failed","time":{"start":1728460906749,"stop":1728460907231,"duration":482},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=607, idBook=-1, firstName=Delinda, lastName=Hayes)","400","Author with negative Book ID values shouldn't be created"],"tags":[]}],"uid":"cbd4026964127f84c52f5ec16f874f7f"},{"name":"Book should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a book after it has already been deleted","uid":"a884cbba06ca0c71","parentUid":"2a9043e57177aea22f04fabe758903cb","status":"failed","time":{"start":1728460818428,"stop":1728460823439,"duration":5011},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2a9043e57177aea22f04fabe758903cb"},{"name":"Cannot delete book with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a book with negative id","uid":"42002b2a94187b69","parentUid":"eada11eecbab43690d1986a248b378f0","status":"failed","time":{"start":1728460823474,"stop":1728460823960,"duration":486},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"eada11eecbab43690d1986a248b378f0"},{"name":"\nThe following 2 assertions failed:\n1) [Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:30)\n2) [Book should be deleted] \nexpected: \"Not Found\"\n but was: \"Book 124\"\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:33)\n","children":[{"name":"Verify that we can delete an existing book","uid":"14b800bf06be9f72","parentUid":"733c3cd18d2fdffce9aef654a152dd4d","status":"failed","time":{"start":1728460826321,"stop":1728460829637,"duration":3316},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"733c3cd18d2fdffce9aef654a152dd4d"},{"name":"Cannot delete book with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent book","uid":"cc0dfe96749ddfb","parentUid":"67a458809384d4b7fa45ab751d62740e","status":"failed","time":{"start":1728460829640,"stop":1728460831750,"duration":2110},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"67a458809384d4b7fa45ab751d62740e"},{"name":"Cannot update book by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a book by negative ID","uid":"e55fe67b82abcc8e","parentUid":"55634d9611c3a987f63e6eb9732264dc","status":"failed","time":{"start":1728460831753,"stop":1728460832235,"duration":482},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"55634d9611c3a987f63e6eb9732264dc"},{"name":"Book doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent book","uid":"bb1e3e5e1d43ab4c","parentUid":"b4a6224ca59d54af07963b4492ef831c","status":"failed","time":{"start":1728460842005,"stop":1728460843941,"duration":1936},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b4a6224ca59d54af07963b4492ef831c"},{"name":"Cannot update author by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a author by negative ID","uid":"79a8f6054fc69b53","parentUid":"d224f289a8893664c1d486844ae7c764","status":"failed","time":{"start":1728460854919,"stop":1728460855416,"duration":497},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"d224f289a8893664c1d486844ae7c764"},{"name":"Author with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"23289381b176efe9","parentUid":"a80397cd680a3d8c3846f121931ad39e","status":"failed","time":{"start":1728460862656,"stop":1728460869562,"duration":6906},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be updated"],"tags":[]}],"uid":"a80397cd680a3d8c3846f121931ad39e"},{"name":"Author doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent author","uid":"47a9b32a10dec61a","parentUid":"a032517df060fd60f900c990f7591823","status":"failed","time":{"start":1728460897400,"stop":1728460904283,"duration":6883},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a032517df060fd60f900c990f7591823"},{"name":"\nThe following assertion failed:\n1) [Author with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"29ddad7275702a3c","parentUid":"2c56157cb6437b73e46b50248e563fb1","status":"failed","time":{"start":1728460904818,"stop":1728460905304,"duration":486},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be created"],"tags":[]}],"uid":"2c56157cb6437b73e46b50248e563fb1"},{"name":"Author should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a author after it has already been deleted","uid":"767479c333e49d01","parentUid":"207ffbd3a7044bd433a867543991917b","status":"failed","time":{"start":1728460938364,"stop":1728460945769,"duration":7405},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"207ffbd3a7044bd433a867543991917b"},{"name":"Cannot delete author with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a author with negative id","uid":"b3ebd53607e84cc6","parentUid":"4980178a54c9663521aca707d35885cc","status":"failed","time":{"start":1728460945771,"stop":1728460946240,"duration":469},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"4980178a54c9663521aca707d35885cc"},{"name":"\nThe following 2 assertions failed:\n1) [Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:30)\n2) [Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:33)\n","children":[{"name":"Verify that we can delete an existing author","uid":"af12712362f6a34","parentUid":"5890c1749a20afa52ee2c4d354c3c538","status":"failed","time":{"start":1728460947703,"stop":1728460955452,"duration":7749},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"5890c1749a20afa52ee2c4d354c3c538"},{"name":"Cannot delete author with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent author","uid":"525047c9a47c70e7","parentUid":"3e522ede7434154f8f6c4a4f1bf5fed4","status":"failed","time":{"start":1728460955453,"stop":1728460962298,"duration":6845},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3e522ede7434154f8f6c4a4f1bf5fed4"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}]}