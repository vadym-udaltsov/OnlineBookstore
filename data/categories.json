{"uid":"4b4757e66a1912dae1a509f688f20b0f","name":"categories","children":[{"name":"Product defects","children":[{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"cd035823427ecc96","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727856907113,"stop":1727856907512,"duration":399},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:15:04)","400","Book with empty values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"eddd956bc02111dc","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727857057142,"stop":1727857057524,"duration":382},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:17:34)","400","Book with empty values shouldn't be created"],"tags":[]}],"uid":"3370a7f4dd3188fd5fc8c86282e49c0d"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Id shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"2a2a098daef0e33c","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727856908030,"stop":1727856908399,"duration":369},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=A Darkling Plain, description=Fugiat reiciendis expedita cumque eaque et., pageCount=471, excerpt=Nisi cum perspiciatis eveniet est error ex., publishDate=2024-10-02T08:15:04)","400","Book with negative Id shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"2516816256fe3f71","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727857058093,"stop":1727857058454,"duration":361},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=The Lathe of Heaven, description=Aspernatur optio et., pageCount=363, excerpt=Numquam consequatur voluptates., publishDate=2024-10-02T08:17:34)","400","Book with negative Id shouldn't be created"],"tags":[]}],"uid":"8ed27f214b949010e0aa50c6e49affd7"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Page Count shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"22311c3632bfe472","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727856908402,"stop":1727856908761,"duration":359},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=575, title=Down to a Sunless Sea, description=Quae repudiandae aut., pageCount=-1, excerpt=Qui enim sint quidem., publishDate=2024-10-02T08:15:04)","400","Book with negative Page Count shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"23165b2263b2d759","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727857058457,"stop":1727857058838,"duration":381},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=661, title=Clouds of Witness, description=Voluptatem rerum modi ut., pageCount=-1, excerpt=Aspernatur rem non consequatur magnam perferendis., publishDate=2024-10-02T08:17:34)","400","Book with negative Page Count shouldn't be created"],"tags":[]}],"uid":"80e7135b737a04fdf70f4064292977a9"},{"name":"Book with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"95e29d6346dd06d5","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727856932636,"stop":1727856935142,"duration":2506},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:15:30)","400","Book with empty values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"9f6aa4f66c2dea30","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727857082680,"stop":1727857085277,"duration":2597},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:18:00)","400","Book with empty values shouldn't be updated"],"tags":[]}],"uid":"284eaf1f54ab03c166819829e92cd423"},{"name":"Book with negative Id shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"f9f9093271ac72db","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727856937241,"stop":1727856939338,"duration":2097},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Consider Phlebas, description=Minus a saepe quia., pageCount=287, excerpt=Et et et est., publishDate=2024-10-02T08:15:30)","400","Book with negative Id shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"5bcc53f1486f8c40","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727857087533,"stop":1727857089703,"duration":2170},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=To Sail Beyond the Sunset, description=Autem corrupti voluptas aut ipsam dolorum minus qui., pageCount=324, excerpt=Maxime sint corrupti fuga iure., publishDate=2024-10-02T08:18:00)","400","Book with negative Id shouldn't be updated"],"tags":[]}],"uid":"1b5867a212a17820a5873ac942dcd231"},{"name":"Book with negative Page Count shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"f8f05954060dc94f","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727856939341,"stop":1727856941401,"duration":2060},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=570, title=Pale Kings and Princes, description=Nostrum numquam qui corrupti fuga natus., pageCount=-1, excerpt=Quia odio sed., publishDate=2024-10-02T08:15:30)","400","Book with negative Page Count shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"490c677bdf56cbe9","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727857089704,"stop":1727857091880,"duration":2176},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=515, title=Time To Murder And Create, description=Et tempora dolorem laborum animi totam quia asperiores., pageCount=-1, excerpt=Dignissimos enim ea nisi officiis adipisci nihil., publishDate=2024-10-02T08:18:00)","400","Book with negative Page Count shouldn't be updated"],"tags":[]}],"uid":"a06ce7956868c32978db476adede7eb6"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"de69d091b7a52e10","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727856944474,"stop":1727856944824,"duration":350},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=7, firstName=Selina, lastName=Moore)","400","Author with empty ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"c148a5bf3312c086","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727857095299,"stop":1727857095639,"duration":340},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=6, firstName=Harris, lastName=Bashirian)","400","Author with empty ID shouldn't be created"],"tags":[]}],"uid":"65fa78b39144a4ada83f643d5bc79964"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"49b2b39e33277c0d","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727856944826,"stop":1727856945166,"duration":340},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=539, idBook=0, firstName=Humberto, lastName=Nolan)","400","Author with empty Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"829dd45aff720a8a","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727857095641,"stop":1727857095998,"duration":357},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=570, idBook=0, firstName=Tiffaney, lastName=Wolff)","400","Author with empty Book ID shouldn't be created"],"tags":[]}],"uid":"e9e27f9ce896036cfab8ae1ed0473865"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"4425573925306d55","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727856945168,"stop":1727856945500,"duration":332},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=3, firstName=Zenia, lastName=Wintheiser)","400","Author with negative ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"6ae5f84838f22c1b","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727857096000,"stop":1727857096350,"duration":350},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=8, firstName=Marlon, lastName=Murazik)","400","Author with negative ID shouldn't be created"],"tags":[]}],"uid":"5419c6a1b19b22305f90d28adedd7a3b"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"dacc21f1ae09d231","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727856945502,"stop":1727856945868,"duration":366},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=522, idBook=-1, firstName=Rosario, lastName=Greenholt)","400","Author with negative Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"bac3e93b378916c5","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727857096352,"stop":1727857096704,"duration":352},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=572, idBook=-1, firstName=Tonette, lastName=Rau)","400","Author with negative Book ID shouldn't be created"],"tags":[]}],"uid":"c3a1f4279175b6452cc4b08aff3c57d5"},{"name":"Author with empty ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"73bfc6b7558e818e","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727856989229,"stop":1727856995620,"duration":6391},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=8, firstName=Hank, lastName=Bailey)","400","Author with empty ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"470d9d2523183d46","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727857140008,"stop":1727857146522,"duration":6514},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=9, firstName=Galen, lastName=Barton)","400","Author with empty ID shouldn't be updated"],"tags":[]}],"uid":"6e4a2787e8c4488bf832eff110764ff1"},{"name":"Author with empty Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"ca556720b97e4cfe","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727856995621,"stop":1727857002152,"duration":6531},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=651, idBook=0, firstName=Carolee, lastName=Hintz)","400","Author with empty Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"ac512795c2f71a14","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727857146523,"stop":1727857153088,"duration":6565},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=547, idBook=0, firstName=Krista, lastName=Lubowitz)","400","Author with empty Book ID shouldn't be updated"],"tags":[]}],"uid":"6c8c12fd6164dc235d43eca74f33905a"},{"name":"Author with negative ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"cb0e16728d1c0ff9","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727857002154,"stop":1727857008815,"duration":6661},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=5, firstName=Lacey, lastName=Jakubowski)","400","Author with negative ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"df93994718d6b2c4","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727857153089,"stop":1727857159671,"duration":6582},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=8, firstName=Juan, lastName=Anderson)","400","Author with negative ID shouldn't be updated"],"tags":[]}],"uid":"c8ce8265024a3ebe4420d86197f92a98"},{"name":"Author with negative Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"58dbdd73b11b36a","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727857008816,"stop":1727857015312,"duration":6496},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=559, idBook=-1, firstName=Ilene, lastName=Schmitt)","400","Author with negative Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"52f23e4eb150693f","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727857159674,"stop":1727857166212,"duration":6538},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=682, idBook=-1, firstName=Harvey, lastName=Hermiston)","400","Author with negative Book ID shouldn't be updated"],"tags":[]}],"uid":"f272fa165a79ea7e933802110e90b2b9"},{"name":"Book should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a book after it has already been deleted","uid":"49e1f5903332d5a2","parentUid":"2a9043e57177aea22f04fabe758903cb","status":"failed","time":{"start":1727857070271,"stop":1727857073247,"duration":2976},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2a9043e57177aea22f04fabe758903cb"},{"name":"Cannot delete book with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a book with negative id","uid":"2f74462fa7be581d","parentUid":"eada11eecbab43690d1986a248b378f0","status":"failed","time":{"start":1727857073249,"stop":1727857073582,"duration":333},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"eada11eecbab43690d1986a248b378f0"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:30)\n-- failure 2 --\n[Book should be deleted] \nexpected: \"Not Found\"\n but was: \"Book 184\"\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:33)","children":[{"name":"Verify that we can delete an existing book","uid":"dbc6b971c9725c79","parentUid":"2fff2d500c27a105de43c27aefcf7e55","status":"failed","time":{"start":1727857074673,"stop":1727857077763,"duration":3090},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2fff2d500c27a105de43c27aefcf7e55"},{"name":"Cannot delete book with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent book","uid":"d5b03892bfdbe08a","parentUid":"67a458809384d4b7fa45ab751d62740e","status":"failed","time":{"start":1727857077766,"stop":1727857079909,"duration":2143},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"67a458809384d4b7fa45ab751d62740e"},{"name":"Cannot update book by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a book by negative ID","uid":"38c6c47c08450804","parentUid":"55634d9611c3a987f63e6eb9732264dc","status":"failed","time":{"start":1727857079911,"stop":1727857080231,"duration":320},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"55634d9611c3a987f63e6eb9732264dc"},{"name":"Book doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent book","uid":"b3dae4d45ad9564b","parentUid":"b4a6224ca59d54af07963b4492ef831c","status":"failed","time":{"start":1727857091882,"stop":1727857094462,"duration":2580},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b4a6224ca59d54af07963b4492ef831c"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"2269df6877d73d8c","parentUid":"d74c92717ec3c0f9ae9c4d3da0e46204","status":"failed","time":{"start":1727857094950,"stop":1727857095297,"duration":347},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be created"],"tags":[]}],"uid":"d74c92717ec3c0f9ae9c4d3da0e46204"},{"name":"Cannot update author by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a author by negative ID","uid":"93e34e669dd78b9a","parentUid":"d224f289a8893664c1d486844ae7c764","status":"failed","time":{"start":1727857126359,"stop":1727857126684,"duration":325},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"d224f289a8893664c1d486844ae7c764"},{"name":"Author with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"cb6562ea2a93b3c0","parentUid":"a80397cd680a3d8c3846f121931ad39e","status":"failed","time":{"start":1727857133446,"stop":1727857140006,"duration":6560},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be updated"],"tags":[]}],"uid":"a80397cd680a3d8c3846f121931ad39e"},{"name":"Author doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent author","uid":"7e049c2175afc34e","parentUid":"a032517df060fd60f900c990f7591823","status":"failed","time":{"start":1727857166214,"stop":1727857172729,"duration":6515},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a032517df060fd60f900c990f7591823"},{"name":"Author should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a author after it has already been deleted","uid":"499502961c3d63a","parentUid":"207ffbd3a7044bd433a867543991917b","status":"failed","time":{"start":1727857172730,"stop":1727857179874,"duration":7144},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"207ffbd3a7044bd433a867543991917b"},{"name":"Cannot delete author with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a author with negative id","uid":"1990482533cd2739","parentUid":"4980178a54c9663521aca707d35885cc","status":"failed","time":{"start":1727857179876,"stop":1727857180215,"duration":339},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"4980178a54c9663521aca707d35885cc"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:54)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:57)","children":[{"name":"Verify that we can delete an created author","uid":"e6bda7cce6c98110","parentUid":"52074c71f423fbd9438cd62e6af3093f","status":"failed","time":{"start":1727857180216,"stop":1727857181205,"duration":989},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":true,"parameters":[],"tags":[]}],"uid":"52074c71f423fbd9438cd62e6af3093f"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:30)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:33)","children":[{"name":"Verify that we can delete an existing author","uid":"ed8e4693a8391fbd","parentUid":"73d888308bcf147d02c56cfa9feda61b","status":"failed","time":{"start":1727857181208,"stop":1727857188307,"duration":7099},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"73d888308bcf147d02c56cfa9feda61b"},{"name":"Cannot delete author with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent author","uid":"77393b2989fc9c85","parentUid":"3e522ede7434154f8f6c4a4f1bf5fed4","status":"failed","time":{"start":1727857188309,"stop":1727857194949,"duration":6640},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3e522ede7434154f8f6c4a4f1bf5fed4"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}]}