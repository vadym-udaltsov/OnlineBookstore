{"uid":"4b4757e66a1912dae1a509f688f20b0f","name":"categories","children":[{"name":"Product defects","children":[{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"8d745eb69c1ac98b","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727852439816,"stop":1727852440144,"duration":328},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T07:00:37)","400","Book with empty values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"173fdb7212bd50be","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727852584661,"stop":1727852585020,"duration":359},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T07:03:01)","400","Book with empty values shouldn't be created"],"tags":[]}],"uid":"3370a7f4dd3188fd5fc8c86282e49c0d"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Id shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"953e37c185eb31ef","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727852440630,"stop":1727852440940,"duration":310},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=The Moving Finger, description=Ducimus harum maxime aut sunt aut., pageCount=289, excerpt=Maiores unde eos aspernatur quia., publishDate=2024-10-02T07:00:37)","400","Book with negative Id shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"6da498f0ed066e84","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727852585494,"stop":1727852585791,"duration":297},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=The Painted Veil, description=Tempore tenetur iste nisi., pageCount=185, excerpt=Neque sint ad consequatur molestias est., publishDate=2024-10-02T07:03:01)","400","Book with negative Id shouldn't be created"],"tags":[]}],"uid":"8ed27f214b949010e0aa50c6e49affd7"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Page Count shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"30a5277284cb916f","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727852440943,"stop":1727852441267,"duration":324},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=552, title=Behold the Man, description=Adipisci velit quia consequatur., pageCount=-1, excerpt=Et aliquam nemo architecto placeat., publishDate=2024-10-02T07:00:37)","400","Book with negative Page Count shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"c5fa4555d31a9d66","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727852585794,"stop":1727852586099,"duration":305},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=570, title=The Last Enemy, description=Incidunt voluptate nemo vero., pageCount=-1, excerpt=Qui vel quis dicta quaerat., publishDate=2024-10-02T07:03:01)","400","Book with negative Page Count shouldn't be created"],"tags":[]}],"uid":"80e7135b737a04fdf70f4064292977a9"},{"name":"Book with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"f7d7b9417044fc10","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727852462620,"stop":1727852464827,"duration":2207},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T07:01:00)","400","Book with empty values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"122a827063fabd72","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727852607263,"stop":1727852609597,"duration":2334},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T07:03:25)","400","Book with empty values shouldn't be updated"],"tags":[]}],"uid":"284eaf1f54ab03c166819829e92cd423"},{"name":"Book with negative Id shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"7b06347f6edfd8a1","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727852467041,"stop":1727852468919,"duration":1878},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Jesting Pilate, description=Aliquid iusto in distinctio similique minima repellendus., pageCount=261, excerpt=Eligendi autem et voluptatum rerum., publishDate=2024-10-02T07:01:00)","400","Book with negative Id shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"fac86b6a9294271c","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727852611537,"stop":1727852613620,"duration":2083},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Absalom, Absalom!, description=Sapiente cum consequatur modi quia., pageCount=175, excerpt=Similique laborum molestiae., publishDate=2024-10-02T07:03:25)","400","Book with negative Id shouldn't be updated"],"tags":[]}],"uid":"1b5867a212a17820a5873ac942dcd231"},{"name":"Book with negative Page Count shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"785888783d1de6b0","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727852468921,"stop":1727852470914,"duration":1993},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=559, title=Mother Night, description=Facilis provident molestiae vel voluptate nisi., pageCount=-1, excerpt=Quis corporis est aliquam id veniam dolorum., publishDate=2024-10-02T07:01:00)","400","Book with negative Page Count shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"318396966cd16f07","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727852613622,"stop":1727852615519,"duration":1897},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=558, title=The Far-Distant Oxus, description=Rerum quisquam nihil non., pageCount=-1, excerpt=Voluptates quisquam cumque., publishDate=2024-10-02T07:03:25)","400","Book with negative Page Count shouldn't be updated"],"tags":[]}],"uid":"a06ce7956868c32978db476adede7eb6"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"11d68a656ea19b6f","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727852473738,"stop":1727852474045,"duration":307},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=9, firstName=Sherri, lastName=Donnelly)","400","Author with empty ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"cbc5269941fbf39","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727852618345,"stop":1727852618642,"duration":297},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=5, firstName=Jules, lastName=Homenick)","400","Author with empty ID shouldn't be created"],"tags":[]}],"uid":"65fa78b39144a4ada83f643d5bc79964"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"debcfd96d0a92b80","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727852474048,"stop":1727852474341,"duration":293},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=646, idBook=0, firstName=Jerry, lastName=Runolfsdottir)","400","Author with empty Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"bf998611f3d97538","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727852618644,"stop":1727852618933,"duration":289},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=651, idBook=0, firstName=Ezequiel, lastName=Wisozk)","400","Author with empty Book ID shouldn't be created"],"tags":[]}],"uid":"e9e27f9ce896036cfab8ae1ed0473865"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"6009761215a7140a","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727852474342,"stop":1727852474647,"duration":305},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=9, firstName=Chuck, lastName=Jacobi)","400","Author with negative ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"1aabfd2a106c6bc1","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727852618934,"stop":1727852619235,"duration":301},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=5, firstName=Bobbie, lastName=Stark)","400","Author with negative ID shouldn't be created"],"tags":[]}],"uid":"5419c6a1b19b22305f90d28adedd7a3b"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"97d268c557b8c01b","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727852474649,"stop":1727852474943,"duration":294},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=505, idBook=-1, firstName=Rosio, lastName=Harber)","400","Author with negative Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"ed67c86e43254d95","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727852619237,"stop":1727852619532,"duration":295},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=536, idBook=-1, firstName=Glynda, lastName=Champlin)","400","Author with negative Book ID shouldn't be created"],"tags":[]}],"uid":"c3a1f4279175b6452cc4b08aff3c57d5"},{"name":"Author with empty ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"876ccdb9fe939d20","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727852516459,"stop":1727852522746,"duration":6287},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=8, firstName=Nadine, lastName=Gerhold)","400","Author with empty ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"6bc14c6713abc661","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727852661274,"stop":1727852667837,"duration":6563},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=6, firstName=Lester, lastName=Legros)","400","Author with empty ID shouldn't be updated"],"tags":[]}],"uid":"6e4a2787e8c4488bf832eff110764ff1"},{"name":"Author with empty Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"2fa34e9fed64f32b","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727852522748,"stop":1727852529168,"duration":6420},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=520, idBook=0, firstName=Otto, lastName=Welch)","400","Author with empty Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"b8bd28f10ef4b240","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727852667839,"stop":1727852674111,"duration":6272},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=666, idBook=0, firstName=Tyra, lastName=Gulgowski)","400","Author with empty Book ID shouldn't be updated"],"tags":[]}],"uid":"6c8c12fd6164dc235d43eca74f33905a"},{"name":"Author with negative ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"d4b38719b6836640","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727852529170,"stop":1727852535415,"duration":6245},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=5, firstName=Austin, lastName=Schuster)","400","Author with negative ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"432d449fdd6012d4","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727852674112,"stop":1727852680393,"duration":6281},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=3, firstName=Sulema, lastName=DuBuque)","400","Author with negative ID shouldn't be updated"],"tags":[]}],"uid":"c8ce8265024a3ebe4420d86197f92a98"},{"name":"Author with negative Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"ad378f965e42c0c8","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727852535417,"stop":1727852542008,"duration":6591},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=592, idBook=-1, firstName=Matt, lastName=Harber)","400","Author with negative Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"80ed397cd704fa4d","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727852680395,"stop":1727852686796,"duration":6401},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=657, idBook=-1, firstName=Rona, lastName=Grimes)","400","Author with negative Book ID shouldn't be updated"],"tags":[]}],"uid":"f272fa165a79ea7e933802110e90b2b9"},{"name":"Book should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a book after it has already been deleted","uid":"fef85855cf4ee910","parentUid":"2a9043e57177aea22f04fabe758903cb","status":"failed","time":{"start":1727852596133,"stop":1727852598617,"duration":2484},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2a9043e57177aea22f04fabe758903cb"},{"name":"Cannot delete book with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a book with negative id","uid":"edfafc1fecd4d256","parentUid":"eada11eecbab43690d1986a248b378f0","status":"failed","time":{"start":1727852598619,"stop":1727852598896,"duration":277},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"eada11eecbab43690d1986a248b378f0"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:30)\n-- failure 2 --\n[Book should be deleted] \nexpected: \"Not Found\"\n but was: \"Book 180\"\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:33)","children":[{"name":"Verify that we can delete an existing book","uid":"35e179c5383bfcb3","parentUid":"33a5050dc0e4291f47bc594528df680e","status":"failed","time":{"start":1727852599879,"stop":1727852602827,"duration":2948},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"33a5050dc0e4291f47bc594528df680e"},{"name":"Cannot delete book with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent book","uid":"9c990cda69b24ecc","parentUid":"67a458809384d4b7fa45ab751d62740e","status":"failed","time":{"start":1727852602830,"stop":1727852604833,"duration":2003},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"67a458809384d4b7fa45ab751d62740e"},{"name":"Cannot update book by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a book by negative ID","uid":"b4c884bde0e5b372","parentUid":"55634d9611c3a987f63e6eb9732264dc","status":"failed","time":{"start":1727852604835,"stop":1727852605135,"duration":300},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"55634d9611c3a987f63e6eb9732264dc"},{"name":"Book doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent book","uid":"9c54b71a48262ec4","parentUid":"b4a6224ca59d54af07963b4492ef831c","status":"failed","time":{"start":1727852615521,"stop":1727852617604,"duration":2083},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b4a6224ca59d54af07963b4492ef831c"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"76716e1256d0448b","parentUid":"d74c92717ec3c0f9ae9c4d3da0e46204","status":"failed","time":{"start":1727852618047,"stop":1727852618343,"duration":296},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be created"],"tags":[]}],"uid":"d74c92717ec3c0f9ae9c4d3da0e46204"},{"name":"Cannot update author by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a author by negative ID","uid":"4fc9a6f682b94d07","parentUid":"d224f289a8893664c1d486844ae7c764","status":"failed","time":{"start":1727852648359,"stop":1727852648656,"duration":297},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"d224f289a8893664c1d486844ae7c764"},{"name":"Author with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"df4118be8194ff27","parentUid":"a80397cd680a3d8c3846f121931ad39e","status":"failed","time":{"start":1727852655134,"stop":1727852661272,"duration":6138},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be updated"],"tags":[]}],"uid":"a80397cd680a3d8c3846f121931ad39e"},{"name":"Author doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent author","uid":"74c0d41865765459","parentUid":"a032517df060fd60f900c990f7591823","status":"failed","time":{"start":1727852686797,"stop":1727852693120,"duration":6323},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a032517df060fd60f900c990f7591823"},{"name":"Author should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a author after it has already been deleted","uid":"33169b9f7680a269","parentUid":"207ffbd3a7044bd433a867543991917b","status":"failed","time":{"start":1727852693122,"stop":1727852699505,"duration":6383},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"207ffbd3a7044bd433a867543991917b"},{"name":"Cannot delete author with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a author with negative id","uid":"7fbae421aed0627e","parentUid":"4980178a54c9663521aca707d35885cc","status":"failed","time":{"start":1727852699506,"stop":1727852699783,"duration":277},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"4980178a54c9663521aca707d35885cc"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:30)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:33)","children":[{"name":"Verify that we can delete an existing author","uid":"141f5a9d2163bbd3","parentUid":"73d888308bcf147d02c56cfa9feda61b","status":"failed","time":{"start":1727852700662,"stop":1727852707565,"duration":6903},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"73d888308bcf147d02c56cfa9feda61b"},{"name":"Cannot delete author with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent author","uid":"9498ed507e78ec6a","parentUid":"3e522ede7434154f8f6c4a4f1bf5fed4","status":"failed","time":{"start":1727852707568,"stop":1727852713885,"duration":6317},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3e522ede7434154f8f6c4a4f1bf5fed4"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}]}