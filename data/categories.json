{"uid":"4b4757e66a1912dae1a509f688f20b0f","name":"categories","children":[{"name":"Product defects","children":[{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"afd1c66b83e801a8","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727856570622,"stop":1727856570941,"duration":319},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:09:27)","400","Book with empty values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"9a873d6874f93a28","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727856717203,"stop":1727856717554,"duration":351},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:11:54)","400","Book with empty values shouldn't be created"],"tags":[]}],"uid":"3370a7f4dd3188fd5fc8c86282e49c0d"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Id shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"59ea1e762b26833","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727856571401,"stop":1727856571713,"duration":312},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=In a Dry Season, description=Odio necessitatibus libero aperiam vitae quod et., pageCount=134, excerpt=Assumenda illo molestias enim., publishDate=2024-10-02T08:09:27)","400","Book with negative Id shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"4fc9a7cb0a4b1701","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727856718050,"stop":1727856718370,"duration":320},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=A Time of Gifts, description=Nemo non accusamus., pageCount=169, excerpt=Cum aspernatur repellat ipsam facilis sit debitis., publishDate=2024-10-02T08:11:54)","400","Book with negative Id shouldn't be created"],"tags":[]}],"uid":"8ed27f214b949010e0aa50c6e49affd7"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Page Count shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"72f99df29ff3c56","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727856571716,"stop":1727856572031,"duration":315},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=664, title=The Lathe of Heaven, description=Ratione ut veniam nihil illo et quia., pageCount=-1, excerpt=Ea voluptatem porro porro., publishDate=2024-10-02T08:09:27)","400","Book with negative Page Count shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"f4fe67b8ff45b0f6","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727856718372,"stop":1727856718691,"duration":319},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=685, title=The Needle's Eye, description=Sed tenetur et est., pageCount=-1, excerpt=Consequatur asperiores saepe qui itaque., publishDate=2024-10-02T08:11:54)","400","Book with negative Page Count shouldn't be created"],"tags":[]}],"uid":"80e7135b737a04fdf70f4064292977a9"},{"name":"Book with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"4bfaa3b3d017ba83","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727856593333,"stop":1727856595574,"duration":2241},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:09:51)","400","Book with empty values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"7625e7fa0b4543f4","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727856740592,"stop":1727856742844,"duration":2252},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:12:18)","400","Book with empty values shouldn't be updated"],"tags":[]}],"uid":"284eaf1f54ab03c166819829e92cd423"},{"name":"Book with negative Id shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"2fc1557615fec9f8","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727856597626,"stop":1727856599587,"duration":1961},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=The Mermaids Singing, description=Ut eos quod quisquam neque ex ducimus., pageCount=385, excerpt=Placeat quam eius explicabo., publishDate=2024-10-02T08:09:51)","400","Book with negative Id shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"bf5b492079682a81","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727856744848,"stop":1727856746880,"duration":2032},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=The Green Bay Tree, description=In tempore quis., pageCount=217, excerpt=Non ipsam ipsa pariatur assumenda perspiciatis., publishDate=2024-10-02T08:12:18)","400","Book with negative Id shouldn't be updated"],"tags":[]}],"uid":"1b5867a212a17820a5873ac942dcd231"},{"name":"Book with negative Page Count shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"fc5d47154cb3adca","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727856599588,"stop":1727856601715,"duration":2127},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=688, title=The Golden Bowl, description=Ut itaque error possimus., pageCount=-1, excerpt=Suscipit est sit ut., publishDate=2024-10-02T08:09:51)","400","Book with negative Page Count shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"1543039d328329b1","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727856746882,"stop":1727856748893,"duration":2011},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=609, title=Dance Dance Dance, description=Sed aut omnis exercitationem a., pageCount=-1, excerpt=A sint ut modi quam itaque temporibus., publishDate=2024-10-02T08:12:18)","400","Book with negative Page Count shouldn't be updated"],"tags":[]}],"uid":"a06ce7956868c32978db476adede7eb6"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"a2ffce8a025387a2","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727856605696,"stop":1727856605999,"duration":303},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=2, firstName=Clifford, lastName=Mills)","400","Author with empty ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"e88e50ec38157d6e","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727856751532,"stop":1727856751823,"duration":291},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=2, firstName=Londa, lastName=Kuhn)","400","Author with empty ID shouldn't be created"],"tags":[]}],"uid":"65fa78b39144a4ada83f643d5bc79964"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"61f25550257b0017","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727856606001,"stop":1727856606295,"duration":294},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=676, idBook=0, firstName=Mirian, lastName=Gorczany)","400","Author with empty Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"74fc9553bc8d7bc0","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727856751825,"stop":1727856752149,"duration":324},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=655, idBook=0, firstName=Cristopher, lastName=O'Connell)","400","Author with empty Book ID shouldn't be created"],"tags":[]}],"uid":"e9e27f9ce896036cfab8ae1ed0473865"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"692a505036076ee9","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727856606298,"stop":1727856606612,"duration":314},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=4, firstName=Alejandro, lastName=Schowalter)","400","Author with negative ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"f795f45925337283","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727856752151,"stop":1727856752447,"duration":296},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=2, firstName=Brittni, lastName=Carroll)","400","Author with negative ID shouldn't be created"],"tags":[]}],"uid":"5419c6a1b19b22305f90d28adedd7a3b"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"f4025787c35d5ac4","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727856606614,"stop":1727856606904,"duration":290},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=559, idBook=-1, firstName=Roland, lastName=Kuhn)","400","Author with negative Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"84f29d57f0580c88","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727856752449,"stop":1727856752737,"duration":288},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=526, idBook=-1, firstName=Tijuana, lastName=Rohan)","400","Author with negative Book ID shouldn't be created"],"tags":[]}],"uid":"c3a1f4279175b6452cc4b08aff3c57d5"},{"name":"Author with empty ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"d08cf769c892826c","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727856649296,"stop":1727856655632,"duration":6336},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=3, firstName=Young, lastName=Koelpin)","400","Author with empty ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"6ae7933fc280c491","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727856794338,"stop":1727856800582,"duration":6244},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=7, firstName=Alfonzo, lastName=Goodwin)","400","Author with empty ID shouldn't be updated"],"tags":[]}],"uid":"6e4a2787e8c4488bf832eff110764ff1"},{"name":"Author with empty Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"f8f56f5a2e62804c","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727856655633,"stop":1727856662017,"duration":6384},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=572, idBook=0, firstName=Cary, lastName=Balistreri)","400","Author with empty Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"7b181d27eed8e84f","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727856800584,"stop":1727856806789,"duration":6205},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=522, idBook=0, firstName=Marquis, lastName=Kshlerin)","400","Author with empty Book ID shouldn't be updated"],"tags":[]}],"uid":"6c8c12fd6164dc235d43eca74f33905a"},{"name":"Author with negative ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"a8e9df25a31ec76b","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727856662019,"stop":1727856668482,"duration":6463},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=9, firstName=Lu, lastName=Kuvalis)","400","Author with negative ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"dc63de42773988","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727856806791,"stop":1727856813084,"duration":6293},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=2, firstName=Myron, lastName=Grant)","400","Author with negative ID shouldn't be updated"],"tags":[]}],"uid":"c8ce8265024a3ebe4420d86197f92a98"},{"name":"Author with negative Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"296a545ecded79fe","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727856668484,"stop":1727856675047,"duration":6563},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=690, idBook=-1, firstName=Kirk, lastName=Gleichner)","400","Author with negative Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"87477bf4e97b7b89","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727856813085,"stop":1727856819212,"duration":6127},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=523, idBook=-1, firstName=Henry, lastName=Willms)","400","Author with negative Book ID shouldn't be updated"],"tags":[]}],"uid":"f272fa165a79ea7e933802110e90b2b9"},{"name":"Book should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a book after it has already been deleted","uid":"a1e36206b4eaa8fa","parentUid":"2a9043e57177aea22f04fabe758903cb","status":"failed","time":{"start":1727856728983,"stop":1727856731667,"duration":2684},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2a9043e57177aea22f04fabe758903cb"},{"name":"Cannot delete book with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a book with negative id","uid":"a3f313edf82cceaf","parentUid":"eada11eecbab43690d1986a248b378f0","status":"failed","time":{"start":1727856731669,"stop":1727856731940,"duration":271},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"eada11eecbab43690d1986a248b378f0"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:30)\n-- failure 2 --\n[Book should be deleted] \nexpected: \"Not Found\"\n but was: \"Book 161\"\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:33)","children":[{"name":"Verify that we can delete an existing book","uid":"f2ce7651ea4897d0","parentUid":"51f159b498da8b2bf81d567a40e91482","status":"failed","time":{"start":1727856732918,"stop":1727856735826,"duration":2908},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"51f159b498da8b2bf81d567a40e91482"},{"name":"Cannot delete book with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent book","uid":"3b02484d09e46a76","parentUid":"67a458809384d4b7fa45ab751d62740e","status":"failed","time":{"start":1727856735829,"stop":1727856738141,"duration":2312},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"67a458809384d4b7fa45ab751d62740e"},{"name":"Cannot update book by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a book by negative ID","uid":"cf434ed1c7543d4","parentUid":"55634d9611c3a987f63e6eb9732264dc","status":"failed","time":{"start":1727856738143,"stop":1727856738440,"duration":297},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"55634d9611c3a987f63e6eb9732264dc"},{"name":"Book doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent book","uid":"91c3108c56d8db47","parentUid":"b4a6224ca59d54af07963b4492ef831c","status":"failed","time":{"start":1727856748895,"stop":1727856750823,"duration":1928},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b4a6224ca59d54af07963b4492ef831c"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"114639ec1f7f4884","parentUid":"d74c92717ec3c0f9ae9c4d3da0e46204","status":"failed","time":{"start":1727856751228,"stop":1727856751530,"duration":302},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be created"],"tags":[]}],"uid":"d74c92717ec3c0f9ae9c4d3da0e46204"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyGetAuthorAPITest.lambda$getDeletedAuthor$10(VerifyGetAuthorAPITest.java:187)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyGetAuthorAPITest.lambda$getDeletedAuthor$10(VerifyGetAuthorAPITest.java:190)","children":[{"name":"Verify that we cannot get deleted author","uid":"e58191a3603a03f1","parentUid":"002f473e7e90cfcfda738615c8f47f3f","status":"failed","time":{"start":1727856768108,"stop":1727856768983,"duration":875},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"002f473e7e90cfcfda738615c8f47f3f"},{"name":"Cannot update author by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a author by negative ID","uid":"fce69d657de7702f","parentUid":"d224f289a8893664c1d486844ae7c764","status":"failed","time":{"start":1727856781305,"stop":1727856781597,"duration":292},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"d224f289a8893664c1d486844ae7c764"},{"name":"Author with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"73436cf2095ef8ea","parentUid":"a80397cd680a3d8c3846f121931ad39e","status":"failed","time":{"start":1727856788107,"stop":1727856794336,"duration":6229},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be updated"],"tags":[]}],"uid":"a80397cd680a3d8c3846f121931ad39e"},{"name":"Author doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent author","uid":"25601fea37b2a0ec","parentUid":"a032517df060fd60f900c990f7591823","status":"failed","time":{"start":1727856819214,"stop":1727856825406,"duration":6192},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a032517df060fd60f900c990f7591823"},{"name":"Author should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a author after it has already been deleted","uid":"9fa627a39f38006c","parentUid":"207ffbd3a7044bd433a867543991917b","status":"failed","time":{"start":1727856825407,"stop":1727856831997,"duration":6590},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"207ffbd3a7044bd433a867543991917b"},{"name":"Cannot delete author with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a author with negative id","uid":"3115af37dc5434ae","parentUid":"4980178a54c9663521aca707d35885cc","status":"failed","time":{"start":1727856831999,"stop":1727856832291,"duration":292},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"4980178a54c9663521aca707d35885cc"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:30)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:33)","children":[{"name":"Verify that we can delete an existing author","uid":"75478a684d15e2b6","parentUid":"73d888308bcf147d02c56cfa9feda61b","status":"failed","time":{"start":1727856833170,"stop":1727856839786,"duration":6616},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"73d888308bcf147d02c56cfa9feda61b"},{"name":"Cannot delete author with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent author","uid":"549e031f0c271876","parentUid":"3e522ede7434154f8f6c4a4f1bf5fed4","status":"failed","time":{"start":1727856839788,"stop":1727856846072,"duration":6284},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3e522ede7434154f8f6c4a4f1bf5fed4"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}]}