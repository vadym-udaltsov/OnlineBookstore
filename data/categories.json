{"uid":"4b4757e66a1912dae1a509f688f20b0f","name":"categories","children":[{"name":"Product defects","children":[{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"f282398333772f70","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727856561636,"stop":1727856561973,"duration":337},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:09:18)","400","Book with empty values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"ca0f3538f7fe1f1f","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727856704452,"stop":1727856704763,"duration":311},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:11:41)","400","Book with empty values shouldn't be created"],"tags":[]}],"uid":"3370a7f4dd3188fd5fc8c86282e49c0d"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Id shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"dcd5cb15d27d37a9","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727856562463,"stop":1727856562776,"duration":313},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=The Wives of Bath, description=Illo qui dolorem aut ducimus sed., pageCount=183, excerpt=Perferendis quis saepe rerum quo nemo voluptatem non., publishDate=2024-10-02T08:09:18)","400","Book with negative Id shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"c6dfdc8c98c59533","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727856705264,"stop":1727856705568,"duration":304},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=A Catskill Eagle, description=Cumque ipsam maiores id commodi aut voluptates., pageCount=432, excerpt=Omnis doloribus totam fugiat est., publishDate=2024-10-02T08:11:41)","400","Book with negative Id shouldn't be created"],"tags":[]}],"uid":"8ed27f214b949010e0aa50c6e49affd7"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Page Count shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"7878d97ddfe7c214","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727856562779,"stop":1727856563087,"duration":308},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=659, title=Bury My Heart at Wounded Knee, description=Error distinctio quia., pageCount=-1, excerpt=Est ipsam enim ducimus., publishDate=2024-10-02T08:09:18)","400","Book with negative Page Count shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"f9d6c47d415493e1","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727856705571,"stop":1727856705853,"duration":282},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=662, title=Noli Me Tangere, description=Autem et non facilis ad qui eius laudantium., pageCount=-1, excerpt=Vel perspiciatis est rerum culpa., publishDate=2024-10-02T08:11:41)","400","Book with negative Page Count shouldn't be created"],"tags":[]}],"uid":"80e7135b737a04fdf70f4064292977a9"},{"name":"Book with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"5046ca3853af9c9e","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727856583837,"stop":1727856585851,"duration":2014},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:09:41)","400","Book with empty values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"cdede2d4f28ab5e4","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727856727711,"stop":1727856729684,"duration":1973},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T08:12:05)","400","Book with empty values shouldn't be updated"],"tags":[]}],"uid":"284eaf1f54ab03c166819829e92cd423"},{"name":"Book with negative Id shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"f3b8d8016b977b26","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727856587817,"stop":1727856590186,"duration":2369},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=An Acceptable Time, description=Sequi odit eveniet., pageCount=131, excerpt=Vero porro consequuntur accusamus debitis., publishDate=2024-10-02T08:09:41)","400","Book with negative Id shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"88b99b91adbcf133","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727856731506,"stop":1727856733349,"duration":1843},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Blithe Spirit, description=Aut quis doloribus dicta possimus sint ut doloremque., pageCount=201, excerpt=Omnis est est neque maxime., publishDate=2024-10-02T08:12:05)","400","Book with negative Id shouldn't be updated"],"tags":[]}],"uid":"1b5867a212a17820a5873ac942dcd231"},{"name":"Book with negative Page Count shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"d07ce7457103863d","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727856590188,"stop":1727856592000,"duration":1812},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=619, title=The Daffodil Sky, description=Quas vitae explicabo voluptate ea provident occaecati non., pageCount=-1, excerpt=Est delectus repudiandae et iste., publishDate=2024-10-02T08:09:41)","400","Book with negative Page Count shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"bf27be9fd6ef2128","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727856733351,"stop":1727856735360,"duration":2009},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=682, title=The Skull Beneath the Skin, description=Repellendus sit eius est velit quis molestiae voluptas., pageCount=-1, excerpt=Error iusto corrupti recusandae qui., publishDate=2024-10-02T08:12:05)","400","Book with negative Page Count shouldn't be updated"],"tags":[]}],"uid":"a06ce7956868c32978db476adede7eb6"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"cc10fce2f54e78c9","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727856594620,"stop":1727856594894,"duration":274},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=6, firstName=Alaine, lastName=Rutherford)","400","Author with empty ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"9aee16e961c12f7d","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727856738282,"stop":1727856738582,"duration":300},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=7, firstName=Lester, lastName=Kling)","400","Author with empty ID shouldn't be created"],"tags":[]}],"uid":"65fa78b39144a4ada83f643d5bc79964"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"4c45a0ff46aa925e","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727856594896,"stop":1727856595178,"duration":282},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=607, idBook=0, firstName=Maynard, lastName=Bogisich)","400","Author with empty Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"3091389c2d763199","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727856738584,"stop":1727856738909,"duration":325},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=551, idBook=0, firstName=Mauro, lastName=Rohan)","400","Author with empty Book ID shouldn't be created"],"tags":[]}],"uid":"e9e27f9ce896036cfab8ae1ed0473865"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"12b07b652e1d75c8","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727856595180,"stop":1727856595479,"duration":299},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=3, firstName=Darwin, lastName=Lesch)","400","Author with negative ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"d52a2144d062582d","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727856738911,"stop":1727856739184,"duration":273},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=3, firstName=Yelena, lastName=Frami)","400","Author with negative ID shouldn't be created"],"tags":[]}],"uid":"5419c6a1b19b22305f90d28adedd7a3b"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"44b3403e83115099","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727856595480,"stop":1727856595749,"duration":269},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=682, idBook=-1, firstName=Isobel, lastName=Waters)","400","Author with negative Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"8dcf2fd40c7e0e3b","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727856739186,"stop":1727856739470,"duration":284},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=669, idBook=-1, firstName=Hassan, lastName=Larkin)","400","Author with negative Book ID shouldn't be created"],"tags":[]}],"uid":"c3a1f4279175b6452cc4b08aff3c57d5"},{"name":"Author with empty ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"23bfd4b7c4686ebf","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727856637141,"stop":1727856643447,"duration":6306},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=5, firstName=Derek, lastName=Lemke)","400","Author with empty ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"6a13714dbd13dbc8","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727856779868,"stop":1727856786341,"duration":6473},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=5, firstName=Raymon, lastName=Jerde)","400","Author with empty ID shouldn't be updated"],"tags":[]}],"uid":"6e4a2787e8c4488bf832eff110764ff1"},{"name":"Author with empty Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"f99233f968a385bf","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727856643449,"stop":1727856649685,"duration":6236},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=617, idBook=0, firstName=Lani, lastName=Quigley)","400","Author with empty Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"3cf2b36c9463d988","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727856786343,"stop":1727856792497,"duration":6154},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=693, idBook=0, firstName=Vaughn, lastName=Swift)","400","Author with empty Book ID shouldn't be updated"],"tags":[]}],"uid":"6c8c12fd6164dc235d43eca74f33905a"},{"name":"Author with negative ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"1fdac432a078e844","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727856649686,"stop":1727856656037,"duration":6351},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=3, firstName=Ambrose, lastName=McGlynn)","400","Author with negative ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"cb670517da1a7ecb","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727856792498,"stop":1727856798634,"duration":6136},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=3, firstName=Darline, lastName=Collins)","400","Author with negative ID shouldn't be updated"],"tags":[]}],"uid":"c8ce8265024a3ebe4420d86197f92a98"},{"name":"Author with negative Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"a0efbf6a71fc8a78","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727856656038,"stop":1727856662132,"duration":6094},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=687, idBook=-1, firstName=Felice, lastName=Schmeler)","400","Author with negative Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"9b9d36aea0c148eb","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727856798635,"stop":1727856804971,"duration":6336},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=678, idBook=-1, firstName=Valorie, lastName=Sporer)","400","Author with negative Book ID shouldn't be updated"],"tags":[]}],"uid":"f272fa165a79ea7e933802110e90b2b9"},{"name":"Book should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a book after it has already been deleted","uid":"d4cbf8735f7fddf3","parentUid":"2a9043e57177aea22f04fabe758903cb","status":"failed","time":{"start":1727856716267,"stop":1727856718793,"duration":2526},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2a9043e57177aea22f04fabe758903cb"},{"name":"Cannot delete book with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a book with negative id","uid":"abd8fc3a2a6c3b0b","parentUid":"eada11eecbab43690d1986a248b378f0","status":"failed","time":{"start":1727856718795,"stop":1727856719081,"duration":286},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"eada11eecbab43690d1986a248b378f0"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:30)\n-- failure 2 --\n[Book should be deleted] \nexpected: \"Not Found\"\n but was: \"Book 98\"\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:33)","children":[{"name":"Verify that we can delete an existing book","uid":"d49f24dccf6d1cdf","parentUid":"82b9e861fda1cea9e6ef99f284787c99","status":"failed","time":{"start":1727856719985,"stop":1727856722971,"duration":2986},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"82b9e861fda1cea9e6ef99f284787c99"},{"name":"Cannot delete book with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent book","uid":"4b1e05a50ef35a2f","parentUid":"67a458809384d4b7fa45ab751d62740e","status":"failed","time":{"start":1727856722974,"stop":1727856725291,"duration":2317},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"67a458809384d4b7fa45ab751d62740e"},{"name":"Cannot update book by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a book by negative ID","uid":"d133624e29274e4e","parentUid":"55634d9611c3a987f63e6eb9732264dc","status":"failed","time":{"start":1727856725294,"stop":1727856725615,"duration":321},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"55634d9611c3a987f63e6eb9732264dc"},{"name":"Book doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent book","uid":"b6fb219cc9e2b660","parentUid":"b4a6224ca59d54af07963b4492ef831c","status":"failed","time":{"start":1727856735362,"stop":1727856737589,"duration":2227},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b4a6224ca59d54af07963b4492ef831c"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"4fc8bef1988faa4d","parentUid":"d74c92717ec3c0f9ae9c4d3da0e46204","status":"failed","time":{"start":1727856737994,"stop":1727856738280,"duration":286},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be created"],"tags":[]}],"uid":"d74c92717ec3c0f9ae9c4d3da0e46204"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyGetAuthorAPITest.lambda$getDeletedAuthor$10(VerifyGetAuthorAPITest.java:187)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyGetAuthorAPITest.lambda$getDeletedAuthor$10(VerifyGetAuthorAPITest.java:190)","children":[{"name":"Verify that we cannot get deleted author","uid":"b54a3022adf535cd","parentUid":"002f473e7e90cfcfda738615c8f47f3f","status":"failed","time":{"start":1727856754860,"stop":1727856755721,"duration":861},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":true,"parameters":[],"tags":[]}],"uid":"002f473e7e90cfcfda738615c8f47f3f"},{"name":"Cannot update author by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a author by negative ID","uid":"11b792aa6519e8f9","parentUid":"d224f289a8893664c1d486844ae7c764","status":"failed","time":{"start":1727856767526,"stop":1727856767810,"duration":284},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"d224f289a8893664c1d486844ae7c764"},{"name":"Author with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"a1e16fa4dd669fb3","parentUid":"a80397cd680a3d8c3846f121931ad39e","status":"failed","time":{"start":1727856773989,"stop":1727856779866,"duration":5877},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be updated"],"tags":[]}],"uid":"a80397cd680a3d8c3846f121931ad39e"},{"name":"Author doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent author","uid":"51944a8a092e5799","parentUid":"a032517df060fd60f900c990f7591823","status":"failed","time":{"start":1727856804973,"stop":1727856811201,"duration":6228},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a032517df060fd60f900c990f7591823"},{"name":"Author should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a author after it has already been deleted","uid":"59e842e00464f3dc","parentUid":"207ffbd3a7044bd433a867543991917b","status":"failed","time":{"start":1727856811202,"stop":1727856817668,"duration":6466},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"207ffbd3a7044bd433a867543991917b"},{"name":"Cannot delete author with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a author with negative id","uid":"5dd9fa9acea36a8e","parentUid":"4980178a54c9663521aca707d35885cc","status":"failed","time":{"start":1727856817669,"stop":1727856817941,"duration":272},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"4980178a54c9663521aca707d35885cc"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:30)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:33)","children":[{"name":"Verify that we can delete an existing author","uid":"faf2a16ce4e945fc","parentUid":"73d888308bcf147d02c56cfa9feda61b","status":"failed","time":{"start":1727856818840,"stop":1727856825585,"duration":6745},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"73d888308bcf147d02c56cfa9feda61b"},{"name":"Cannot delete author with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent author","uid":"30b0b6da5777daa8","parentUid":"3e522ede7434154f8f6c4a4f1bf5fed4","status":"failed","time":{"start":1727856825587,"stop":1727856831769,"duration":6182},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3e522ede7434154f8f6c4a4f1bf5fed4"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}]}