{"uid":"4b4757e66a1912dae1a509f688f20b0f","name":"categories","children":[{"name":"Product defects","children":[{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"1f84cc050e6e6ff8","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727852777477,"stop":1727852777810,"duration":333},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T07:06:14)","400","Book with empty values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"643260196c4dbb5f","parentUid":"3370a7f4dd3188fd5fc8c86282e49c0d","status":"failed","time":{"start":1727852921548,"stop":1727852921888,"duration":340},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T07:08:38)","400","Book with empty values shouldn't be created"],"tags":[]}],"uid":"3370a7f4dd3188fd5fc8c86282e49c0d"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Id shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"8dc5d19e65b85742","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727852778304,"stop":1727852778629,"duration":325},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Blithe Spirit, description=Qui voluptatem quae quia aut id., pageCount=186, excerpt=Voluptas delectus harum., publishDate=2024-10-02T07:06:14)","400","Book with negative Id shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"fe848800e4dfa89c","parentUid":"8ed27f214b949010e0aa50c6e49affd7","status":"failed","time":{"start":1727852922376,"stop":1727852922678,"duration":302},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Mr Standfast, description=Aut corrupti quia., pageCount=265, excerpt=Sequi officia rerum quis voluptas., publishDate=2024-10-02T07:08:38)","400","Book with negative Id shouldn't be created"],"tags":[]}],"uid":"8ed27f214b949010e0aa50c6e49affd7"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Book with negative Page Count shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)","children":[{"name":"Verify that we can create a new book with Data","uid":"5a15e53c02af7414","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727852778632,"stop":1727852778951,"duration":319},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=599, title=Time To Murder And Create, description=Suscipit eligendi perspiciatis maxime et voluptatem., pageCount=-1, excerpt=Enim repudiandae cumque quod ipsa deserunt id debitis., publishDate=2024-10-02T07:06:14)","400","Book with negative Page Count shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"80904bf9c2e1ad7d","parentUid":"80e7135b737a04fdf70f4064292977a9","status":"failed","time":{"start":1727852922681,"stop":1727852922999,"duration":318},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=563, title=Wildfire at Midnight, description=Aspernatur animi eos., pageCount=-1, excerpt=Sit non esse libero sit ut voluptatem., publishDate=2024-10-02T07:08:38)","400","Book with negative Page Count shouldn't be created"],"tags":[]}],"uid":"80e7135b737a04fdf70f4064292977a9"},{"name":"Book with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"2f0e5d144fa2dee2","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727852800158,"stop":1727852802350,"duration":2192},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T07:06:38)","400","Book with empty values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"1524896a1a6d0362","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1727852943938,"stop":1727852946130,"duration":2192},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-02T07:09:01)","400","Book with empty values shouldn't be updated"],"tags":[]}],"uid":"284eaf1f54ab03c166819829e92cd423"},{"name":"Book with negative Id shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"c313dc5aaa71fbb5","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727852804301,"stop":1727852806637,"duration":2336},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=The Curious Incident of the Dog in the Night-Time, description=Quasi illo necessitatibus distinctio., pageCount=317, excerpt=Est odio et soluta qui fugiat dolor., publishDate=2024-10-02T07:06:38)","400","Book with negative Id shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"ec685d6325f59779","parentUid":"1b5867a212a17820a5873ac942dcd231","status":"failed","time":{"start":1727852948111,"stop":1727852950154,"duration":2043},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=After Many a Summer Dies the Swan, description=Non qui autem esse atque., pageCount=237, excerpt=Sunt eum debitis., publishDate=2024-10-02T07:09:01)","400","Book with negative Id shouldn't be updated"],"tags":[]}],"uid":"1b5867a212a17820a5873ac942dcd231"},{"name":"Book with negative Page Count shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"3adf4cbf3d4c5ad3","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727852806639,"stop":1727852808635,"duration":1996},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=690, title=Blood's a Rover, description=Et maiores ducimus possimus ut culpa., pageCount=-1, excerpt=Et ut voluptate., publishDate=2024-10-02T07:06:38)","400","Book with negative Page Count shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"6306f20c7c3896ec","parentUid":"a06ce7956868c32978db476adede7eb6","status":"failed","time":{"start":1727852950155,"stop":1727852952110,"duration":1955},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=638, title=The Little Foxes, description=Facilis explicabo sed adipisci aut ea., pageCount=-1, excerpt=Et sed recusandae perferendis officia vel sed nisi., publishDate=2024-10-02T07:09:01)","400","Book with negative Page Count shouldn't be updated"],"tags":[]}],"uid":"a06ce7956868c32978db476adede7eb6"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"79a3d658ddd6ce0e","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727852811443,"stop":1727852811731,"duration":288},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=9, firstName=Armanda, lastName=Collier)","400","Author with empty ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"c884af7227257f1b","parentUid":"65fa78b39144a4ada83f643d5bc79964","status":"failed","time":{"start":1727852954860,"stop":1727852955150,"duration":290},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=9, firstName=Tula, lastName=Hammes)","400","Author with empty ID shouldn't be created"],"tags":[]}],"uid":"65fa78b39144a4ada83f643d5bc79964"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"f4187988b22be571","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727852811732,"stop":1727852812024,"duration":292},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=617, idBook=0, firstName=Zona, lastName=Block)","400","Author with empty Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"d693e5b5ce3c4ff","parentUid":"e9e27f9ce896036cfab8ae1ed0473865","status":"failed","time":{"start":1727852955152,"stop":1727852955448,"duration":296},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=664, idBook=0, firstName=Jerrod, lastName=Bahringer)","400","Author with empty Book ID shouldn't be created"],"tags":[]}],"uid":"e9e27f9ce896036cfab8ae1ed0473865"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"8fbc8ce8cbabc062","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727852812025,"stop":1727852812321,"duration":296},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=3, firstName=Josh, lastName=Mills)","400","Author with negative ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"7f82a466970578c7","parentUid":"5419c6a1b19b22305f90d28adedd7a3b","status":"failed","time":{"start":1727852955449,"stop":1727852955731,"duration":282},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=2, firstName=Cherrie, lastName=Gutmann)","400","Author with negative ID shouldn't be created"],"tags":[]}],"uid":"5419c6a1b19b22305f90d28adedd7a3b"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with negative Book ID shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"211a89a897c9765b","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727852812322,"stop":1727852812609,"duration":287},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=550, idBook=-1, firstName=Virgen, lastName=Farrell)","400","Author with negative Book ID shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"522adbe3d7f49758","parentUid":"c3a1f4279175b6452cc4b08aff3c57d5","status":"failed","time":{"start":1727852955733,"stop":1727852956021,"duration":288},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=690, idBook=-1, firstName=Yolanda, lastName=Bergnaum)","400","Author with negative Book ID shouldn't be created"],"tags":[]}],"uid":"c3a1f4279175b6452cc4b08aff3c57d5"},{"name":"Author with empty ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"b7aecaf1de3faac1","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727852854512,"stop":1727852860968,"duration":6456},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=9, firstName=Justina, lastName=Yost)","400","Author with empty ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"b4d47b1f19888533","parentUid":"6e4a2787e8c4488bf832eff110764ff1","status":"failed","time":{"start":1727852998116,"stop":1727853004698,"duration":6582},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=5, firstName=Denita, lastName=Jacobs)","400","Author with empty ID shouldn't be updated"],"tags":[]}],"uid":"6e4a2787e8c4488bf832eff110764ff1"},{"name":"Author with empty Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"e909789bb905f825","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727852860970,"stop":1727852867244,"duration":6274},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=567, idBook=0, firstName=Seymour, lastName=Ankunding)","400","Author with empty Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"da670cbe7d31c77f","parentUid":"6c8c12fd6164dc235d43eca74f33905a","status":"failed","time":{"start":1727853004700,"stop":1727853011043,"duration":6343},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=515, idBook=0, firstName=Tora, lastName=Murphy)","400","Author with empty Book ID shouldn't be updated"],"tags":[]}],"uid":"6c8c12fd6164dc235d43eca74f33905a"},{"name":"Author with negative ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"e9cbaaccf5768db3","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727852867245,"stop":1727852873523,"duration":6278},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=8, firstName=Jalisa, lastName=Wunsch)","400","Author with negative ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"76c36be1553e6d1f","parentUid":"c8ce8265024a3ebe4420d86197f92a98","status":"failed","time":{"start":1727853011044,"stop":1727853017545,"duration":6501},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=1, firstName=Myong, lastName=Wehner)","400","Author with negative ID shouldn't be updated"],"tags":[]}],"uid":"c8ce8265024a3ebe4420d86197f92a98"},{"name":"Author with negative Book ID shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"5699d38bdb5e19c0","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727852873525,"stop":1727852879817,"duration":6292},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=553, idBook=-1, firstName=Tena, lastName=Lebsack)","400","Author with negative Book ID shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"b47ef9a8f8d1d064","parentUid":"f272fa165a79ea7e933802110e90b2b9","status":"failed","time":{"start":1727853017547,"stop":1727853024011,"duration":6464},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=673, idBook=-1, firstName=Shantell, lastName=Mitchell)","400","Author with negative Book ID shouldn't be updated"],"tags":[]}],"uid":"f272fa165a79ea7e933802110e90b2b9"},{"name":"Book should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a book after it has already been deleted","uid":"bc89761eb956f37d","parentUid":"2a9043e57177aea22f04fabe758903cb","status":"failed","time":{"start":1727852932956,"stop":1727852935434,"duration":2478},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2a9043e57177aea22f04fabe758903cb"},{"name":"Cannot delete book with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a book with negative id","uid":"c6b2f16d0a015044","parentUid":"eada11eecbab43690d1986a248b378f0","status":"failed","time":{"start":1727852935436,"stop":1727852935714,"duration":278},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"eada11eecbab43690d1986a248b378f0"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:30)\n-- failure 2 --\n[Book should be deleted] \nexpected: \"Not Found\"\n but was: \"Book 123\"\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:33)","children":[{"name":"Verify that we can delete an existing book","uid":"8f6c189fbbced528","parentUid":"f483ce0ee7e4f692a6b9f315827f1ab0","status":"failed","time":{"start":1727852936632,"stop":1727852939442,"duration":2810},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"f483ce0ee7e4f692a6b9f315827f1ab0"},{"name":"Cannot delete book with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent book","uid":"1d8ba393ec774b14","parentUid":"67a458809384d4b7fa45ab751d62740e","status":"failed","time":{"start":1727852939444,"stop":1727852941534,"duration":2090},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"67a458809384d4b7fa45ab751d62740e"},{"name":"Cannot update book by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a book by negative ID","uid":"fb1787b0a6837dc1","parentUid":"55634d9611c3a987f63e6eb9732264dc","status":"failed","time":{"start":1727852941536,"stop":1727852941817,"duration":281},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"55634d9611c3a987f63e6eb9732264dc"},{"name":"Book doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent book","uid":"3b8a9062d18ee0f0","parentUid":"b4a6224ca59d54af07963b4492ef831c","status":"failed","time":{"start":1727852952112,"stop":1727852954160,"duration":2048},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b4a6224ca59d54af07963b4492ef831c"},{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\n[Author with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)","children":[{"name":"Verify that we can add a new author","uid":"b601d403042a5a72","parentUid":"d74c92717ec3c0f9ae9c4d3da0e46204","status":"failed","time":{"start":1727852954571,"stop":1727852954859,"duration":288},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be created"],"tags":[]}],"uid":"d74c92717ec3c0f9ae9c4d3da0e46204"},{"name":"Cannot update author by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a author by negative ID","uid":"441df486f7d2cdfe","parentUid":"d224f289a8893664c1d486844ae7c764","status":"failed","time":{"start":1727852984941,"stop":1727852985239,"duration":298},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"d224f289a8893664c1d486844ae7c764"},{"name":"Author with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"1865f96bb453819e","parentUid":"a80397cd680a3d8c3846f121931ad39e","status":"failed","time":{"start":1727852991805,"stop":1727852998113,"duration":6308},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be updated"],"tags":[]}],"uid":"a80397cd680a3d8c3846f121931ad39e"},{"name":"Author doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent author","uid":"ab5f001196b2c5ee","parentUid":"a032517df060fd60f900c990f7591823","status":"failed","time":{"start":1727853024013,"stop":1727853030507,"duration":6494},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a032517df060fd60f900c990f7591823"},{"name":"Author should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a author after it has already been deleted","uid":"ac848c55a07b7312","parentUid":"207ffbd3a7044bd433a867543991917b","status":"failed","time":{"start":1727853030509,"stop":1727853037215,"duration":6706},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"207ffbd3a7044bd433a867543991917b"},{"name":"Cannot delete author with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a author with negative id","uid":"8cb75ae08f3eee7f","parentUid":"4980178a54c9663521aca707d35885cc","status":"failed","time":{"start":1727853037216,"stop":1727853037505,"duration":289},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"4980178a54c9663521aca707d35885cc"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:54)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:57)","children":[{"name":"Verify that we can delete an created author","uid":"113295d10c29ebd1","parentUid":"52074c71f423fbd9438cd62e6af3093f","status":"failed","time":{"start":1727853037506,"stop":1727853038407,"duration":901},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":true,"parameters":[],"tags":[]}],"uid":"52074c71f423fbd9438cd62e6af3093f"},{"name":"\nMultiple Failures (2 failures)\n-- failure 1 --\n[Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:30)\n-- failure 2 --\n[Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:33)","children":[{"name":"Verify that we can delete an existing author","uid":"42b027bbd5319967","parentUid":"73d888308bcf147d02c56cfa9feda61b","status":"failed","time":{"start":1727853038409,"stop":1727853045410,"duration":7001},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"73d888308bcf147d02c56cfa9feda61b"},{"name":"Cannot delete author with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent author","uid":"564436264793887","parentUid":"3e522ede7434154f8f6c4a4f1bf5fed4","status":"failed","time":{"start":1727853045412,"stop":1727853051957,"duration":6545},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3e522ede7434154f8f6c4a4f1bf5fed4"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}]}