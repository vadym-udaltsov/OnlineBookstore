{"uid":"4b4757e66a1912dae1a509f688f20b0f","name":"categories","children":[{"name":"Product defects","children":[{"name":"Book with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"67602ad608a381db","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1728460674230,"stop":1728460675669,"duration":1439},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T07:57:52)","400","Book with empty values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"ea2d267e48ef90e2","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1728460810878,"stop":1728460812412,"duration":1534},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T08:00:09)","400","Book with empty values shouldn't be updated"],"tags":[]}],"uid":"284eaf1f54ab03c166819829e92cd423"},{"name":"Book with negative Id values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"e9a45fb1d2154a38","parentUid":"c69cc2c2db4517ff0324acfbd83d1d08","status":"failed","time":{"start":1728460677234,"stop":1728460678704,"duration":1470},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Such, Such Were the Joys, description=Est totam porro qui rerum., pageCount=233, excerpt=Asperiores saepe sed qui., publishDate=2024-10-09T07:57:52)","400","Book with negative Id values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"f3783c8e3dbd01d9","parentUid":"c69cc2c2db4517ff0324acfbd83d1d08","status":"failed","time":{"start":1728460813807,"stop":1728460815278,"duration":1471},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=A Farewell to Arms, description=Harum consequatur odio eum et consequatur., pageCount=227, excerpt=Illo aspernatur facere est., publishDate=2024-10-09T08:00:09)","400","Book with negative Id values shouldn't be updated"],"tags":[]}],"uid":"c69cc2c2db4517ff0324acfbd83d1d08"},{"name":"Book with negative Page Count values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"9ac173065f306dd7","parentUid":"f16577c974f36a3f6f0d851d0ff8c82e","status":"failed","time":{"start":1728460678705,"stop":1728460680196,"duration":1491},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=508, title=Waiting for the Barbarians, description=Delectus dolorem et., pageCount=-1, excerpt=Facere voluptates distinctio quas facilis., publishDate=2024-10-09T07:57:52)","400","Book with negative Page Count values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"d545c01ffc78a7d6","parentUid":"f16577c974f36a3f6f0d851d0ff8c82e","status":"failed","time":{"start":1728460815280,"stop":1728460816671,"duration":1391},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=673, title=Tiger! Tiger!, description=Repellendus suscipit inventore voluptatem., pageCount=-1, excerpt=Et tenetur sit dicta voluptatum., publishDate=2024-10-09T08:00:09)","400","Book with negative Page Count values shouldn't be updated"],"tags":[]}],"uid":"f16577c974f36a3f6f0d851d0ff8c82e"},{"name":"\nThe following assertion failed:\n1) [Book with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)\n","children":[{"name":"Verify that we can create a new book with Data","uid":"9431148616149d3a","parentUid":"438009fafbe2b26dbc1e3a878f50648e","status":"failed","time":{"start":1728460682019,"stop":1728460682312,"duration":293},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T07:58:01)","400","Book with empty values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"8775a0a794ce9a2c","parentUid":"438009fafbe2b26dbc1e3a878f50648e","status":"failed","time":{"start":1728460818483,"stop":1728460818759,"duration":276},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T08:00:18)","400","Book with empty values shouldn't be created"],"tags":[]}],"uid":"438009fafbe2b26dbc1e3a878f50648e"},{"name":"\nThe following assertion failed:\n1) [Book with negative Id values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)\n","children":[{"name":"Verify that we can create a new book with Data","uid":"93d7c6ba40462074","parentUid":"09a4678d52cd3d107246cd6dd208a206","status":"failed","time":{"start":1728460682598,"stop":1728460682888,"duration":290},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=No Highway, description=Quia nam repudiandae., pageCount=370, excerpt=Quibusdam qui incidunt molestias., publishDate=2024-10-09T07:58:01)","400","Book with negative Id values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"ffdc9fa93b90016a","parentUid":"09a4678d52cd3d107246cd6dd208a206","status":"failed","time":{"start":1728460819042,"stop":1728460819324,"duration":282},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Moab Is My Washpot, description=Blanditiis sint consectetur., pageCount=193, excerpt=Quo nam recusandae dolor labore voluptatem similique consequatur., publishDate=2024-10-09T08:00:18)","400","Book with negative Id values shouldn't be created"],"tags":[]}],"uid":"09a4678d52cd3d107246cd6dd208a206"},{"name":"\nThe following assertion failed:\n1) [Book with negative Page Count values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)\n","children":[{"name":"Verify that we can create a new book with Data","uid":"4329346de4432e68","parentUid":"4eaa12affdf10cced05a479607369a66","status":"failed","time":{"start":1728460682889,"stop":1728460683187,"duration":298},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=597, title=The Way Through the Woods, description=Accusantium vitae nisi sint cupiditate qui qui sint., pageCount=-1, excerpt=Commodi explicabo qui ullam., publishDate=2024-10-09T07:58:01)","400","Book with negative Page Count values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"5362b9e0ccf0890a","parentUid":"4eaa12affdf10cced05a479607369a66","status":"failed","time":{"start":1728460819326,"stop":1728460819603,"duration":277},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=674, title=Wildfire at Midnight, description=Nostrum quis ad deserunt., pageCount=-1, excerpt=Cumque suscipit maiores laboriosam quam et., publishDate=2024-10-09T08:00:18)","400","Book with negative Page Count values shouldn't be created"],"tags":[]}],"uid":"4eaa12affdf10cced05a479607369a66"},{"name":"Author with empty ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"83179d515fb75af1","parentUid":"863fb4ff54934aa97733b7d6d5f4a010","status":"failed","time":{"start":1728460703450,"stop":1728460710079,"duration":6629},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=8, firstName=Garfield, lastName=Rice)","400","Author with empty ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"f641b3ee040008a2","parentUid":"863fb4ff54934aa97733b7d6d5f4a010","status":"failed","time":{"start":1728460839496,"stop":1728460845934,"duration":6438},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=2, firstName=George, lastName=Vandervort)","400","Author with empty ID values shouldn't be updated"],"tags":[]}],"uid":"863fb4ff54934aa97733b7d6d5f4a010"},{"name":"Author with empty Book ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"7da7f2603d675045","parentUid":"bbcb886bb3a81eed23f33f68b57b081c","status":"failed","time":{"start":1728460710080,"stop":1728460716558,"duration":6478},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=596, idBook=0, firstName=Latrisha, lastName=Homenick)","400","Author with empty Book ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"22d7026808f7f306","parentUid":"bbcb886bb3a81eed23f33f68b57b081c","status":"failed","time":{"start":1728460845935,"stop":1728460852633,"duration":6698},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=532, idBook=0, firstName=Orval, lastName=Wisozk)","400","Author with empty Book ID values shouldn't be updated"],"tags":[]}],"uid":"bbcb886bb3a81eed23f33f68b57b081c"},{"name":"Author with negative ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"bf0d5bc3056de24b","parentUid":"0b994a4dcaec1e666b910aa98dcbfa35","status":"failed","time":{"start":1728460716560,"stop":1728460722876,"duration":6316},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=5, firstName=Nicola, lastName=Adams)","400","Author with negative ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"6ac008a106a40b92","parentUid":"0b994a4dcaec1e666b910aa98dcbfa35","status":"failed","time":{"start":1728460852635,"stop":1728460859321,"duration":6686},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=3, firstName=Sharla, lastName=Lueilwitz)","400","Author with negative ID values shouldn't be updated"],"tags":[]}],"uid":"0b994a4dcaec1e666b910aa98dcbfa35"},{"name":"Author with negative Book ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"358944a01a766df5","parentUid":"88d43aa5cd072047e3065b7edabcc500","status":"failed","time":{"start":1728460722878,"stop":1728460729197,"duration":6319},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=606, idBook=-1, firstName=Hayden, lastName=Rodriguez)","400","Author with negative Book ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"74f06c23fa9738b1","parentUid":"88d43aa5cd072047e3065b7edabcc500","status":"failed","time":{"start":1728460859323,"stop":1728460865774,"duration":6451},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=651, idBook=-1, firstName=Alica, lastName=Wyman)","400","Author with negative Book ID values shouldn't be updated"],"tags":[]}],"uid":"88d43aa5cd072047e3065b7edabcc500"},{"name":"\nThe following assertion failed:\n1) [Author with empty ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"aa92542bc0f42006","parentUid":"50ad6351d48b97aaa76ec456f901c5a8","status":"failed","time":{"start":1728460736295,"stop":1728460736577,"duration":282},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=4, firstName=Danyel, lastName=Walter)","400","Author with empty ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"c834adb3f0232c82","parentUid":"50ad6351d48b97aaa76ec456f901c5a8","status":"failed","time":{"start":1728460873070,"stop":1728460873362,"duration":292},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=5, firstName=Sang, lastName=Schroeder)","400","Author with empty ID values shouldn't be created"],"tags":[]}],"uid":"50ad6351d48b97aaa76ec456f901c5a8"},{"name":"\nThe following assertion failed:\n1) [Author with empty Book ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"3a3cc7478f64baed","parentUid":"ddca8a099c6e61ba07f2d42326cb6474","status":"failed","time":{"start":1728460736578,"stop":1728460736876,"duration":298},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=626, idBook=0, firstName=Toby, lastName=Thompson)","400","Author with empty Book ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"cb05e55169e28893","parentUid":"ddca8a099c6e61ba07f2d42326cb6474","status":"failed","time":{"start":1728460873363,"stop":1728460873658,"duration":295},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=583, idBook=0, firstName=Shane, lastName=Hackett)","400","Author with empty Book ID values shouldn't be created"],"tags":[]}],"uid":"ddca8a099c6e61ba07f2d42326cb6474"},{"name":"\nThe following assertion failed:\n1) [Author with negative ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"54feba2512b04a74","parentUid":"06b54228939c12b6ccbc33f556c9127a","status":"failed","time":{"start":1728460736877,"stop":1728460737175,"duration":298},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=5, firstName=Bill, lastName=Blick)","400","Author with negative ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"6fa85dcc8ab50719","parentUid":"06b54228939c12b6ccbc33f556c9127a","status":"failed","time":{"start":1728460873659,"stop":1728460873952,"duration":293},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=8, firstName=Janae, lastName=Lakin)","400","Author with negative ID values shouldn't be created"],"tags":[]}],"uid":"06b54228939c12b6ccbc33f556c9127a"},{"name":"\nThe following assertion failed:\n1) [Author with negative Book ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"dcbd67621b758a6e","parentUid":"cbd4026964127f84c52f5ec16f874f7f","status":"failed","time":{"start":1728460737176,"stop":1728460737474,"duration":298},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=576, idBook=-1, firstName=Shana, lastName=Hudson)","400","Author with negative Book ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"622d494595cb5822","parentUid":"cbd4026964127f84c52f5ec16f874f7f","status":"failed","time":{"start":1728460873954,"stop":1728460874263,"duration":309},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=539, idBook=-1, firstName=Elna, lastName=Osinski)","400","Author with negative Book ID values shouldn't be created"],"tags":[]}],"uid":"cbd4026964127f84c52f5ec16f874f7f"},{"name":"Book should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a book after it has already been deleted","uid":"f36a86643e7a8a59","parentUid":"2a9043e57177aea22f04fabe758903cb","status":"failed","time":{"start":1728460798640,"stop":1728460803160,"duration":4520},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2a9043e57177aea22f04fabe758903cb"},{"name":"Cannot delete book with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a book with negative id","uid":"86e25bdda41e51ff","parentUid":"eada11eecbab43690d1986a248b378f0","status":"failed","time":{"start":1728460803194,"stop":1728460803478,"duration":284},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"eada11eecbab43690d1986a248b378f0"},{"name":"\nThe following 2 assertions failed:\n1) [Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:30)\n2) [Book should be deleted] \nexpected: \"Not Found\"\n but was: \"Book 152\"\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:33)\n","children":[{"name":"Verify that we can delete an existing book","uid":"e3522613521f6b68","parentUid":"5cb4c1cd1247b32555c7ad8b5c0fc86f","status":"failed","time":{"start":1728460805132,"stop":1728460807429,"duration":2297},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"5cb4c1cd1247b32555c7ad8b5c0fc86f"},{"name":"Cannot delete book with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent book","uid":"f440b02331515741","parentUid":"67a458809384d4b7fa45ab751d62740e","status":"failed","time":{"start":1728460807431,"stop":1728460809040,"duration":1609},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"67a458809384d4b7fa45ab751d62740e"},{"name":"Cannot update book by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a book by negative ID","uid":"4312e96d7d702978","parentUid":"55634d9611c3a987f63e6eb9732264dc","status":"failed","time":{"start":1728460809043,"stop":1728460809341,"duration":298},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"55634d9611c3a987f63e6eb9732264dc"},{"name":"Book doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent book","uid":"9d056ef6c8052201","parentUid":"b4a6224ca59d54af07963b4492ef831c","status":"failed","time":{"start":1728460816673,"stop":1728460818082,"duration":1409},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b4a6224ca59d54af07963b4492ef831c"},{"name":"Cannot update author by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a author by negative ID","uid":"a581b8b7825bfd50","parentUid":"d224f289a8893664c1d486844ae7c764","status":"failed","time":{"start":1728460825807,"stop":1728460826104,"duration":297},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"d224f289a8893664c1d486844ae7c764"},{"name":"Author with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"e034e7d5b7a0fbea","parentUid":"a80397cd680a3d8c3846f121931ad39e","status":"failed","time":{"start":1728460832993,"stop":1728460839494,"duration":6501},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be updated"],"tags":[]}],"uid":"a80397cd680a3d8c3846f121931ad39e"},{"name":"Author doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent author","uid":"f6c4d9a60f5eb712","parentUid":"a032517df060fd60f900c990f7591823","status":"failed","time":{"start":1728460865776,"stop":1728460872416,"duration":6640},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a032517df060fd60f900c990f7591823"},{"name":"\nThe following assertion failed:\n1) [Author with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"f3971aa831f3d12c","parentUid":"2c56157cb6437b73e46b50248e563fb1","status":"failed","time":{"start":1728460872767,"stop":1728460873069,"duration":302},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be created"],"tags":[]}],"uid":"2c56157cb6437b73e46b50248e563fb1"},{"name":"Author should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a author after it has already been deleted","uid":"5517b931c0439610","parentUid":"207ffbd3a7044bd433a867543991917b","status":"failed","time":{"start":1728460903443,"stop":1728460910554,"duration":7111},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"207ffbd3a7044bd433a867543991917b"},{"name":"Cannot delete author with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a author with negative id","uid":"633a10698ff34d8e","parentUid":"4980178a54c9663521aca707d35885cc","status":"failed","time":{"start":1728460910555,"stop":1728460910835,"duration":280},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"4980178a54c9663521aca707d35885cc"},{"name":"\nThe following 2 assertions failed:\n1) [Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:54)\n2) [Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:57)\n","children":[{"name":"Verify that we can delete an created author","uid":"f8e1103ad38c887f","parentUid":"5ef84a453f3dd719438250499e809c2c","status":"failed","time":{"start":1728460910837,"stop":1728460911693,"duration":856},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":true,"parameters":[],"tags":[]}],"uid":"5ef84a453f3dd719438250499e809c2c"},{"name":"\nThe following 2 assertions failed:\n1) [Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:30)\n2) [Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:33)\n","children":[{"name":"Verify that we can delete an existing author","uid":"6b213fe523545dec","parentUid":"5890c1749a20afa52ee2c4d354c3c538","status":"failed","time":{"start":1728460911694,"stop":1728460919036,"duration":7342},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"5890c1749a20afa52ee2c4d354c3c538"},{"name":"Cannot delete author with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent author","uid":"5ba16daae9ee92cf","parentUid":"3e522ede7434154f8f6c4a4f1bf5fed4","status":"failed","time":{"start":1728460919038,"stop":1728460925577,"duration":6539},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3e522ede7434154f8f6c4a4f1bf5fed4"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}]}