{"uid":"4b4757e66a1912dae1a509f688f20b0f","name":"categories","children":[{"name":"Product defects","children":[{"name":"\nThe following assertion failed:\n1) [Book with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)\n","children":[{"name":"Verify that we can create a new book with Data","uid":"faa6cf75779ab37a","parentUid":"438009fafbe2b26dbc1e3a878f50648e","status":"failed","time":{"start":1728461093501,"stop":1728461093830,"duration":329},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T08:04:50)","400","Book with empty values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"ef77778ea7bea0b1","parentUid":"438009fafbe2b26dbc1e3a878f50648e","status":"failed","time":{"start":1728461229005,"stop":1728461229351,"duration":346},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T08:07:06)","400","Book with empty values shouldn't be created"],"tags":[]}],"uid":"438009fafbe2b26dbc1e3a878f50648e"},{"name":"\nThe following assertion failed:\n1) [Book with negative Id values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)\n","children":[{"name":"Verify that we can create a new book with Data","uid":"d50ef1f79b617fab","parentUid":"09a4678d52cd3d107246cd6dd208a206","status":"failed","time":{"start":1728461094341,"stop":1728461094648,"duration":307},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Carrion Comfort, description=Sed quo ut inventore fugit quibusdam quo., pageCount=430, excerpt=Assumenda perferendis dolor., publishDate=2024-10-09T08:04:50)","400","Book with negative Id values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"65ae853bef7f78b5","parentUid":"09a4678d52cd3d107246cd6dd208a206","status":"failed","time":{"start":1728461229852,"stop":1728461230154,"duration":302},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=For a Breath I Tarry, description=Ullam sunt et explicabo numquam., pageCount=450, excerpt=Facilis perferendis quis harum molestias eos., publishDate=2024-10-09T08:07:06)","400","Book with negative Id values shouldn't be created"],"tags":[]}],"uid":"09a4678d52cd3d107246cd6dd208a206"},{"name":"\nThe following assertion failed:\n1) [Book with negative Page Count values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostBookAPITest.lambda$createBookTest$1(VerifyPostBookAPITest.java:39)\n","children":[{"name":"Verify that we can create a new book with Data","uid":"9499bf0157720f5b","parentUid":"4eaa12affdf10cced05a479607369a66","status":"failed","time":{"start":1728461094650,"stop":1728461094937,"duration":287},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=613, title=The Little Foxes, description=Porro ad nemo nihil., pageCount=-1, excerpt=Velit natus quia est quas., publishDate=2024-10-09T08:04:50)","400","Book with negative Page Count values shouldn't be created"],"tags":[]},{"name":"Verify that we can create a new book with Data","uid":"8ff8d982d6d5f343","parentUid":"4eaa12affdf10cced05a479607369a66","status":"failed","time":{"start":1728461230157,"stop":1728461230492,"duration":335},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=549, title=A Passage to India, description=Qui exercitationem non illum., pageCount=-1, excerpt=Perferendis ipsum cumque corporis molestiae voluptas., publishDate=2024-10-09T08:07:06)","400","Book with negative Page Count values shouldn't be created"],"tags":[]}],"uid":"4eaa12affdf10cced05a479607369a66"},{"name":"Book with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"9251ec89787af11c","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1728461110049,"stop":1728461111544,"duration":1495},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T08:05:08)","400","Book with empty values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"e027a794cddf9207","parentUid":"284eaf1f54ab03c166819829e92cd423","status":"failed","time":{"start":1728461246026,"stop":1728461247509,"duration":1483},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=0, title=null, description=null, pageCount=0, excerpt=null, publishDate=2024-10-09T08:07:24)","400","Book with empty values shouldn't be updated"],"tags":[]}],"uid":"284eaf1f54ab03c166819829e92cd423"},{"name":"Book with negative Id values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"adc7e05a8621525a","parentUid":"c69cc2c2db4517ff0324acfbd83d1d08","status":"failed","time":{"start":1728461112925,"stop":1728461114290,"duration":1365},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=O Jerusalem!, description=Maxime aut modi., pageCount=470, excerpt=Maiores explicabo aperiam fuga dolorem sed., publishDate=2024-10-09T08:05:08)","400","Book with negative Id values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"a3ec943a293943b1","parentUid":"c69cc2c2db4517ff0324acfbd83d1d08","status":"failed","time":{"start":1728461248823,"stop":1728461250181,"duration":1358},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=-1, title=Have His Carcase, description=Nihil natus aut eum., pageCount=143, excerpt=Aut aliquid quo sunt modi corporis est sed., publishDate=2024-10-09T08:07:24)","400","Book with negative Id values shouldn't be updated"],"tags":[]}],"uid":"c69cc2c2db4517ff0324acfbd83d1d08"},{"name":"Book with negative Page Count values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing book","uid":"acf3fb7fb58cc9f9","parentUid":"f16577c974f36a3f6f0d851d0ff8c82e","status":"failed","time":{"start":1728461114292,"stop":1728461115678,"duration":1386},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=621, title=The Road Less Traveled, description=Voluptas ea ut est consequuntur et alias., pageCount=-1, excerpt=Et reprehenderit qui dolor enim quidem., publishDate=2024-10-09T08:05:08)","400","Book with negative Page Count values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing book","uid":"b52e4a234dc03622","parentUid":"f16577c974f36a3f6f0d851d0ff8c82e","status":"failed","time":{"start":1728461250183,"stop":1728461251551,"duration":1368},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Book(id=687, title=Tirra Lirra by the River, description=Consequatur iusto sed at odit doloribus., pageCount=-1, excerpt=Sunt dolor explicabo quis vel., publishDate=2024-10-09T08:07:24)","400","Book with negative Page Count values shouldn't be updated"],"tags":[]}],"uid":"f16577c974f36a3f6f0d851d0ff8c82e"},{"name":"\nThe following assertion failed:\n1) [Author with empty ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"4774a540e9e6382e","parentUid":"50ad6351d48b97aaa76ec456f901c5a8","status":"failed","time":{"start":1728461117770,"stop":1728461118046,"duration":276},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=3, firstName=Giuseppe, lastName=Weber)","400","Author with empty ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"99f7ce210214238a","parentUid":"50ad6351d48b97aaa76ec456f901c5a8","status":"failed","time":{"start":1728461253648,"stop":1728461253924,"duration":276},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=8, firstName=Francesco, lastName=Rath)","400","Author with empty ID values shouldn't be created"],"tags":[]}],"uid":"50ad6351d48b97aaa76ec456f901c5a8"},{"name":"\nThe following assertion failed:\n1) [Author with empty Book ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"76e05c652a148811","parentUid":"ddca8a099c6e61ba07f2d42326cb6474","status":"failed","time":{"start":1728461118048,"stop":1728461118325,"duration":277},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=521, idBook=0, firstName=Lynetta, lastName=Yost)","400","Author with empty Book ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"bea10a2a8eceea7d","parentUid":"ddca8a099c6e61ba07f2d42326cb6474","status":"failed","time":{"start":1728461253926,"stop":1728461254217,"duration":291},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=505, idBook=0, firstName=Donny, lastName=Von)","400","Author with empty Book ID values shouldn't be created"],"tags":[]}],"uid":"ddca8a099c6e61ba07f2d42326cb6474"},{"name":"\nThe following assertion failed:\n1) [Author with negative ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"d4e77d54e505b470","parentUid":"06b54228939c12b6ccbc33f556c9127a","status":"failed","time":{"start":1728461118327,"stop":1728461118610,"duration":283},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=8, firstName=Dino, lastName=O'Kon)","400","Author with negative ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"25e153399b2519ba","parentUid":"06b54228939c12b6ccbc33f556c9127a","status":"failed","time":{"start":1728461254218,"stop":1728461254489,"duration":271},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=7, firstName=Sherry, lastName=Runolfsson)","400","Author with negative ID values shouldn't be created"],"tags":[]}],"uid":"06b54228939c12b6ccbc33f556c9127a"},{"name":"\nThe following assertion failed:\n1) [Author with negative Book ID values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"6fe8f40fb1429e9e","parentUid":"cbd4026964127f84c52f5ec16f874f7f","status":"failed","time":{"start":1728461118611,"stop":1728461118889,"duration":278},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=692, idBook=-1, firstName=Francesco, lastName=Conn)","400","Author with negative Book ID values shouldn't be created"],"tags":[]},{"name":"Verify that we can add a new author","uid":"6ee31a8cf73ed80e","parentUid":"cbd4026964127f84c52f5ec16f874f7f","status":"failed","time":{"start":1728461254491,"stop":1728461254778,"duration":287},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=560, idBook=-1, firstName=Rick, lastName=Johnson)","400","Author with negative Book ID values shouldn't be created"],"tags":[]}],"uid":"cbd4026964127f84c52f5ec16f874f7f"},{"name":"Author with empty ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"26a2b914d9c9e435","parentUid":"863fb4ff54934aa97733b7d6d5f4a010","status":"failed","time":{"start":1728461161826,"stop":1728461168452,"duration":6626},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=4, firstName=Vincenza, lastName=Bins)","400","Author with empty ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"bebf32292f67d833","parentUid":"863fb4ff54934aa97733b7d6d5f4a010","status":"failed","time":{"start":1728461296912,"stop":1728461303664,"duration":6752},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=8, firstName=Major, lastName=Runte)","400","Author with empty ID values shouldn't be updated"],"tags":[]}],"uid":"863fb4ff54934aa97733b7d6d5f4a010"},{"name":"Author with empty Book ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"43adfea2ffcf791a","parentUid":"bbcb886bb3a81eed23f33f68b57b081c","status":"failed","time":{"start":1728461168453,"stop":1728461175105,"duration":6652},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=566, idBook=0, firstName=Amos, lastName=Hahn)","400","Author with empty Book ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"2f7b1fd472f9ab60","parentUid":"bbcb886bb3a81eed23f33f68b57b081c","status":"failed","time":{"start":1728461303665,"stop":1728461310258,"duration":6593},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=558, idBook=0, firstName=Kymberly, lastName=Harris)","400","Author with empty Book ID values shouldn't be updated"],"tags":[]}],"uid":"bbcb886bb3a81eed23f33f68b57b081c"},{"name":"Author with negative ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"4ac5f6922a5de14b","parentUid":"0b994a4dcaec1e666b910aa98dcbfa35","status":"failed","time":{"start":1728461175107,"stop":1728461181783,"duration":6676},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=9, firstName=Ned, lastName=Howe)","400","Author with negative ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"88b0688471305974","parentUid":"0b994a4dcaec1e666b910aa98dcbfa35","status":"failed","time":{"start":1728461310260,"stop":1728461316784,"duration":6524},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=-1, idBook=6, firstName=Kenton, lastName=Bartell)","400","Author with negative ID values shouldn't be updated"],"tags":[]}],"uid":"0b994a4dcaec1e666b910aa98dcbfa35"},{"name":"Author with negative Book ID values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"17bac8dfb3fb275f","parentUid":"88d43aa5cd072047e3065b7edabcc500","status":"failed","time":{"start":1728461181784,"stop":1728461188679,"duration":6895},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=681, idBook=-1, firstName=Fransisca, lastName=Keeling)","400","Author with negative Book ID values shouldn't be updated"],"tags":[]},{"name":"Verify that we can update an existing author","uid":"659cbb55a6c4735a","parentUid":"88d43aa5cd072047e3065b7edabcc500","status":"failed","time":{"start":1728461316786,"stop":1728461323140,"duration":6354},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":["Author(id=589, idBook=-1, firstName=Ryan, lastName=Strosin)","400","Author with negative Book ID values shouldn't be updated"],"tags":[]}],"uid":"88d43aa5cd072047e3065b7edabcc500"},{"name":"Book should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a book after it has already been deleted","uid":"447b98d63b8fc9f3","parentUid":"2a9043e57177aea22f04fabe758903cb","status":"failed","time":{"start":1728461237922,"stop":1728461239768,"duration":1846},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"2a9043e57177aea22f04fabe758903cb"},{"name":"Cannot delete book with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a book with negative id","uid":"6e27340942705ec","parentUid":"eada11eecbab43690d1986a248b378f0","status":"failed","time":{"start":1728461239770,"stop":1728461240044,"duration":274},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"eada11eecbab43690d1986a248b378f0"},{"name":"\nThe following 2 assertions failed:\n1) [Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:30)\n2) [Book should be deleted] \nexpected: \"Not Found\"\n but was: \"Book 39\"\nat VerifyDeleteBookAPITest.lambda$deleteExistingBookTest$0(VerifyDeleteBookAPITest.java:33)\n","children":[{"name":"Verify that we can delete an existing book","uid":"ac28b4f56e225aae","parentUid":"77db380d8a4594f5317fe2270c64b84d","status":"failed","time":{"start":1728461240926,"stop":1728461242945,"duration":2019},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"77db380d8a4594f5317fe2270c64b84d"},{"name":"Cannot delete book with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent book","uid":"d39843de79e5c22d","parentUid":"67a458809384d4b7fa45ab751d62740e","status":"failed","time":{"start":1728461242947,"stop":1728461244379,"duration":1432},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"67a458809384d4b7fa45ab751d62740e"},{"name":"Cannot update book by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a book by negative ID","uid":"586b810b3ce57490","parentUid":"55634d9611c3a987f63e6eb9732264dc","status":"failed","time":{"start":1728461244381,"stop":1728461244669,"duration":288},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"55634d9611c3a987f63e6eb9732264dc"},{"name":"Book doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent book","uid":"220d04e05dbcae87","parentUid":"b4a6224ca59d54af07963b4492ef831c","status":"failed","time":{"start":1728461251553,"stop":1728461252922,"duration":1369},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b4a6224ca59d54af07963b4492ef831c"},{"name":"\nThe following assertion failed:\n1) [Author with empty values shouldn't be created] \nexpected: 400\n but was: 200\nat VerifyPostAuthorAPITest.lambda$createAuthorTest$0(VerifyPostAuthorAPITest.java:20)\n","children":[{"name":"Verify that we can add a new author","uid":"3533f8dbb8432260","parentUid":"2c56157cb6437b73e46b50248e563fb1","status":"failed","time":{"start":1728461253367,"stop":1728461253647,"duration":280},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be created"],"tags":[]}],"uid":"2c56157cb6437b73e46b50248e563fb1"},{"name":"Cannot update author by negative Id expected [400] but found [200]","children":[{"name":"Verify updating a author by negative ID","uid":"e99eeba2653b01a5","parentUid":"d224f289a8893664c1d486844ae7c764","status":"failed","time":{"start":1728461283475,"stop":1728461283750,"duration":275},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"d224f289a8893664c1d486844ae7c764"},{"name":"Author with empty values shouldn't be updated expected [400] but found [200]","children":[{"name":"Verify that we can update an existing author","uid":"499952c50e63f838","parentUid":"a80397cd680a3d8c3846f121931ad39e","status":"failed","time":{"start":1728461290238,"stop":1728461296911,"duration":6673},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":["Author(id=0, idBook=0, firstName=null, lastName=null)","400","Author with empty values shouldn't be updated"],"tags":[]}],"uid":"a80397cd680a3d8c3846f121931ad39e"},{"name":"Author doesn't exist expected [404] but found [200]","children":[{"name":"Verify updating a non-existent author","uid":"56bc7aa6ec8338c","parentUid":"a032517df060fd60f900c990f7591823","status":"failed","time":{"start":1728461323141,"stop":1728461329819,"duration":6678},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a032517df060fd60f900c990f7591823"},{"name":"Author should be deleted expected [204] but found [200]","children":[{"name":"Verify trying to delete a author after it has already been deleted","uid":"215c920bbfa70bd4","parentUid":"207ffbd3a7044bd433a867543991917b","status":"failed","time":{"start":1728461329821,"stop":1728461336543,"duration":6722},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"207ffbd3a7044bd433a867543991917b"},{"name":"Cannot delete author with negative Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a author with negative id","uid":"e9dd54b7812af41a","parentUid":"4980178a54c9663521aca707d35885cc","status":"failed","time":{"start":1728461336545,"stop":1728461336812,"duration":267},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"4980178a54c9663521aca707d35885cc"},{"name":"\nThe following 2 assertions failed:\n1) [Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:54)\n2) [Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteCreatedAuthorTest$1(VerifyDeleteAuthorAPITest.java:57)\n","children":[{"name":"Verify that we can delete an created author","uid":"8a022dcacbe947f8","parentUid":"5ef84a453f3dd719438250499e809c2c","status":"failed","time":{"start":1728461336813,"stop":1728461337680,"duration":867},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"5ef84a453f3dd719438250499e809c2c"},{"name":"\nThe following 2 assertions failed:\n1) [Code Status should be equal to: 404] \nexpected: 404\n but was: 200\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:30)\n2) [Author should be deleted] \nexpected: \"Not Found\"\n but was: null\nat VerifyDeleteAuthorAPITest.lambda$deleteExistingAuthorTest$0(VerifyDeleteAuthorAPITest.java:33)\n","children":[{"name":"Verify that we can delete an existing author","uid":"ebbf7a7df678362b","parentUid":"5890c1749a20afa52ee2c4d354c3c538","status":"failed","time":{"start":1728461337681,"stop":1728461344961,"duration":7280},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"5890c1749a20afa52ee2c4d354c3c538"},{"name":"Cannot delete author with non-existent Id expected [404] but found [200]","children":[{"name":"Verify trying to delete a non-existent author","uid":"ae815eadc820fe77","parentUid":"3e522ede7434154f8f6c4a4f1bf5fed4","status":"failed","time":{"start":1728461344962,"stop":1728461351790,"duration":6828},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"3e522ede7434154f8f6c4a4f1bf5fed4"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"}]}